
03.FND_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000500  00000594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000500  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080010c  0080010c  000005a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d2d  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a51  00000000  00000000  000013bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000657  00000000  00000000  00001e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00002468  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fc  00000000  00000000  00002a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	91 d1       	rcall	.+802    	; 0x3e6 <main>
  c4:	1b c2       	rjmp	.+1078   	; 0x4fc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <get_button>:
int get_button(int button_pin, int button_number){
	int current_state;

	//예)BUTTON1은 4가 넘어옴, 2는 5, 3은 5...
	//BUTTON_PIN값은 눌리면1 안눌리면 0값을 감지함
	current_state = BUTTON_PIN & (1 << button_pin); // 10000 (1<<4결과)
  c8:	40 b3       	in	r20, 0x10	; 16
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <get_button+0x10>
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	8a 95       	dec	r24
  da:	e2 f7       	brpl	.-8      	; 0xd4 <get_button+0xc>
  dc:	cf 01       	movw	r24, r30
  de:	84 23       	and	r24, r20
  e0:	95 23       	and	r25, r21
	//current_state변수로 버튼 값을 읽습니다.

	if(current_state && previous_button_status[button_number]== BUTTON_RELEASE){
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	b9 f0       	breq	.+46     	; 0x114 <get_button+0x4c>
  e6:	fb 01       	movw	r30, r22
  e8:	e4 5f       	subi	r30, 0xF4	; 244
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	20 81       	ld	r18, Z
  ee:	21 11       	cpse	r18, r1
  f0:	11 c0       	rjmp	.+34     	; 0x114 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	ff ef       	ldi	r31, 0xFF	; 255
  f4:	2d ee       	ldi	r18, 0xED	; 237
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	f1 50       	subi	r31, 0x01	; 1
  fa:	20 40       	sbci	r18, 0x00	; 0
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <get_button+0x30>
 100:	00 c0       	rjmp	.+0      	; 0x102 <get_button+0x3a>
 102:	00 00       	nop
		// 버튼이 처음 눌러진 상태
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		previous_button_status[button_number] = BUTTON_PRESS; // 처음 눌러진 상태가 아니다
 104:	fb 01       	movw	r30, r22
 106:	e4 5f       	subi	r30, 0xF4	; 244
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 83       	st	Z, r24
		return 0; //아직 완전히 눌렀다 떼어진 상태가 아니다.
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
	} // 버튼이 이전에 눌러진 상태였으면 현재는 떼어진 상태
	else if(previous_button_status[button_number] == BUTTON_PRESS && current_state == BUTTON_RELEASE){
 114:	fb 01       	movw	r30, r22
 116:	e4 5f       	subi	r30, 0xF4	; 244
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	20 81       	ld	r18, Z
 11c:	21 30       	cpi	r18, 0x01	; 1
 11e:	91 f4       	brne	.+36     	; 0x144 <get_button+0x7c>
 120:	89 2b       	or	r24, r25
 122:	99 f4       	brne	.+38     	; 0x14a <get_button+0x82>
		previous_button_status[button_number] = BUTTON_RELEASE; // 다음 버튼 상태를 체크하기 위해 초기화
 124:	fb 01       	movw	r30, r22
 126:	e4 5f       	subi	r30, 0xF4	; 244
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	10 82       	st	Z, r1
 12c:	9f ef       	ldi	r25, 0xFF	; 255
 12e:	ed ee       	ldi	r30, 0xED	; 237
 130:	f2 e0       	ldi	r31, 0x02	; 2
 132:	91 50       	subi	r25, 0x01	; 1
 134:	e0 40       	sbci	r30, 0x00	; 0
 136:	f0 40       	sbci	r31, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <get_button+0x6a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <get_button+0x74>
 13c:	00 00       	nop
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		return 1; // 완전히 눌렀다 떼어진 상태
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
	}
	// 아직 HIGH인 상태인 것이지
	// 아직 완전히 스위치를 눌렀다 뗀 상태가 아니거나 스위치가 open된 상태 -> return 0;
	return 0;
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret

00000150 <init_fnd>:
#include "extern.h"


void init_fnd(void){
	// PortC를 모두 출력(FND 8pin)으로 하는거니까 모두 write모드로 하기
	FND_DATA_DDR = 0xFF;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	84 bb       	out	0x14, r24	; 20
	FND_DIGIT_DDR |= 0xF0;// 4,5,6,7만 출력이니까 거기만 write모드
 154:	87 b3       	in	r24, 0x17	; 23
 156:	80 6f       	ori	r24, 0xF0	; 240
 158:	87 bb       	out	0x17, r24	; 23
	
	FND_DATA_PORT = 0x00; // PORTC 설정 : FND를 all off
 15a:	15 ba       	out	0x15, r1	; 21
 15c:	08 95       	ret

0000015e <fnd_display>:

}

// display the FND
void fnd_display(bool dot1_state){
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	2b 97       	sbiw	r28, 0x0b	; 11
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
	
	// 0을 찍을려면 g빼고 1로 16진수값 3F입니다, b는 0011_1111(common anode)
	// common cathode는 1100_0000이고, 16진수로 C0
	//0    1     2     3    4    5    6    7    8    9		dp(10번방)
	unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x98,~0x7f};
 172:	9b e0       	ldi	r25, 0x0B	; 11
 174:	e0 e0       	ldi	r30, 0x00	; 0
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	de 01       	movw	r26, r28
 17a:	11 96       	adiw	r26, 0x01	; 1
 17c:	01 90       	ld	r0, Z+
 17e:	0d 92       	st	X+, r0
 180:	9a 95       	dec	r25
 182:	e1 f7       	brne	.-8      	; 0x17c <fnd_display+0x1e>

	static int digit_position = 0; // 자리수 선택  변수 0~3 : 0,1,2,3
	static int dp1 = 0x00;
	
	if(dot1_state){
 184:	88 23       	and	r24, r24
 186:	39 f0       	breq	.+14     	; 0x196 <fnd_display+0x38>
		dp1 = fnd_font[10];
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dp1.1747+0x1>
 190:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dp1.1747>
 194:	04 c0       	rjmp	.+8      	; 0x19e <fnd_display+0x40>
	}else {
		dp1 = 0x00;
 196:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <dp1.1747+0x1>
 19a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <dp1.1747>
	}
	
	switch(digit_position){
 19e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <digit_position.1746>
 1a2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <digit_position.1746+0x1>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	91 05       	cpc	r25, r1
 1aa:	09 f1       	breq	.+66     	; 0x1ee <fnd_display+0x90>
 1ac:	1c f4       	brge	.+6      	; 0x1b4 <fnd_display+0x56>
 1ae:	89 2b       	or	r24, r25
 1b0:	41 f0       	breq	.+16     	; 0x1c2 <fnd_display+0x64>
 1b2:	5d c0       	rjmp	.+186    	; 0x26e <fnd_display+0x110>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	91 05       	cpc	r25, r1
 1b8:	99 f1       	breq	.+102    	; 0x220 <fnd_display+0xc2>
 1ba:	03 97       	sbiw	r24, 0x03	; 3
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <fnd_display+0x62>
 1be:	42 c0       	rjmp	.+132    	; 0x244 <fnd_display+0xe6>
 1c0:	56 c0       	rjmp	.+172    	; 0x26e <fnd_display+0x110>
		case 0: // 1단위 : 100ms마다

		FND_DIGIT_PORT = ~0b10000000; // cathode
 1c2:	8f e7       	ldi	r24, 0x7F	; 127
 1c4:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[ms_count/10%10];
 1c6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ms_count>
 1ca:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ms_count+0x1>
 1ce:	2a e0       	ldi	r18, 0x0A	; 10
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	b9 01       	movw	r22, r18
 1d4:	6c d1       	rcall	.+728    	; 0x4ae <__divmodhi4>
 1d6:	cb 01       	movw	r24, r22
 1d8:	b9 01       	movw	r22, r18
 1da:	69 d1       	rcall	.+722    	; 0x4ae <__divmodhi4>
 1dc:	e1 e0       	ldi	r30, 0x01	; 1
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ec 0f       	add	r30, r28
 1e2:	fd 1f       	adc	r31, r29
 1e4:	e8 0f       	add	r30, r24
 1e6:	f9 1f       	adc	r31, r25
 1e8:	80 81       	ld	r24, Z
 1ea:	85 bb       	out	0x15, r24	; 21
		break;
 1ec:	40 c0       	rjmp	.+128    	; 0x26e <fnd_display+0x110>
		
		case 1: // 10단위 : 10ms마다
		FND_DIGIT_PORT = ~0b01000000; // cathode
 1ee:	8f eb       	ldi	r24, 0xBF	; 191
 1f0:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT =fnd_font[ms_count/100%100] | dp1;
 1f2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ms_count>
 1f6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ms_count+0x1>
 1fa:	24 e6       	ldi	r18, 0x64	; 100
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	b9 01       	movw	r22, r18
 200:	56 d1       	rcall	.+684    	; 0x4ae <__divmodhi4>
 202:	cb 01       	movw	r24, r22
 204:	b9 01       	movw	r22, r18
 206:	53 d1       	rcall	.+678    	; 0x4ae <__divmodhi4>
 208:	e1 e0       	ldi	r30, 0x01	; 1
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ec 0f       	add	r30, r28
 20e:	fd 1f       	adc	r31, r29
 210:	e8 0f       	add	r30, r24
 212:	f9 1f       	adc	r31, r25
 214:	90 81       	ld	r25, Z
 216:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dp1.1747>
 21a:	89 2b       	or	r24, r25
 21c:	85 bb       	out	0x15, r24	; 21
		break;
 21e:	27 c0       	rjmp	.+78     	; 0x26e <fnd_display+0x110>
		
		case 2: // 100단위 : 초의 1의자리수
		FND_DIGIT_PORT = ~0b00100000; // cathode
 220:	8f ed       	ldi	r24, 0xDF	; 223
 222:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count%10];
 224:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_count>
 228:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_count+0x1>
 22c:	6a e0       	ldi	r22, 0x0A	; 10
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	3e d1       	rcall	.+636    	; 0x4ae <__divmodhi4>
 232:	e1 e0       	ldi	r30, 0x01	; 1
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ec 0f       	add	r30, r28
 238:	fd 1f       	adc	r31, r29
 23a:	e8 0f       	add	r30, r24
 23c:	f9 1f       	adc	r31, r25
 23e:	80 81       	ld	r24, Z
 240:	85 bb       	out	0x15, r24	; 21
		break;
 242:	15 c0       	rjmp	.+42     	; 0x26e <fnd_display+0x110>
		
		case 3: // 1000단위 : 초의 10의자리수
		FND_DIGIT_PORT = ~0b00010000; // cathode
 244:	8f ee       	ldi	r24, 0xEF	; 239
 246:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count/10%6];
 248:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_count>
 24c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_count+0x1>
 250:	6a e0       	ldi	r22, 0x0A	; 10
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	2c d1       	rcall	.+600    	; 0x4ae <__divmodhi4>
 256:	cb 01       	movw	r24, r22
 258:	66 e0       	ldi	r22, 0x06	; 6
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	28 d1       	rcall	.+592    	; 0x4ae <__divmodhi4>
 25e:	e1 e0       	ldi	r30, 0x01	; 1
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ec 0f       	add	r30, r28
 264:	fd 1f       	adc	r31, r29
 266:	e8 0f       	add	r30, r24
 268:	f9 1f       	adc	r31, r25
 26a:	80 81       	ld	r24, Z
 26c:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_position++;
 26e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <digit_position.1746>
 272:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <digit_position.1746+0x1>
 276:	01 96       	adiw	r24, 0x01	; 1
	digit_position %= 4; // 다음 표시할 자리수를 준비하고 함수 종료
 278:	83 70       	andi	r24, 0x03	; 3
 27a:	90 78       	andi	r25, 0x80	; 128
 27c:	99 23       	and	r25, r25
 27e:	24 f4       	brge	.+8      	; 0x288 <fnd_display+0x12a>
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	8c 6f       	ori	r24, 0xFC	; 252
 284:	9f 6f       	ori	r25, 0xFF	; 255
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <digit_position.1746+0x1>
 28c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <digit_position.1746>
}
 290:	2b 96       	adiw	r28, 0x0b	; 11
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <fnd_stop_display>:

void fnd_stop_display(bool dot1_state){
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	2b 97       	sbiw	r28, 0x0b	; 11
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
	static int digit_position = 0; // 자리수 선택  변수 0~3 : 0,1,2,3
	static int dp1 = 0x00;
	
	unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x98,~0x7f};
 2b6:	9b e0       	ldi	r25, 0x0B	; 11
 2b8:	e0 e0       	ldi	r30, 0x00	; 0
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	de 01       	movw	r26, r28
 2be:	11 96       	adiw	r26, 0x01	; 1
 2c0:	01 90       	ld	r0, Z+
 2c2:	0d 92       	st	X+, r0
 2c4:	9a 95       	dec	r25
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <fnd_stop_display+0x1e>
		
	if(dot1_state){
 2c8:	88 23       	and	r24, r24
 2ca:	39 f0       	breq	.+14     	; 0x2da <fnd_stop_display+0x38>
		dp1 = fnd_font[10];
 2cc:	80 e8       	ldi	r24, 0x80	; 128
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <dp1.1757+0x1>
 2d4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <dp1.1757>
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <fnd_stop_display+0x40>
		}else {
		dp1 = 0x00;
 2da:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <dp1.1757+0x1>
 2de:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <dp1.1757>
	}
	switch(digit_position){
 2e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <digit_position.1756>
 2e6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <digit_position.1756+0x1>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	91 05       	cpc	r25, r1
 2ee:	09 f1       	breq	.+66     	; 0x332 <fnd_stop_display+0x90>
 2f0:	1c f4       	brge	.+6      	; 0x2f8 <fnd_stop_display+0x56>
 2f2:	89 2b       	or	r24, r25
 2f4:	41 f0       	breq	.+16     	; 0x306 <fnd_stop_display+0x64>
 2f6:	5d c0       	rjmp	.+186    	; 0x3b2 <fnd_stop_display+0x110>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	91 05       	cpc	r25, r1
 2fc:	99 f1       	breq	.+102    	; 0x364 <fnd_stop_display+0xc2>
 2fe:	03 97       	sbiw	r24, 0x03	; 3
 300:	09 f4       	brne	.+2      	; 0x304 <fnd_stop_display+0x62>
 302:	42 c0       	rjmp	.+132    	; 0x388 <fnd_stop_display+0xe6>
 304:	56 c0       	rjmp	.+172    	; 0x3b2 <fnd_stop_display+0x110>
		case 0:
		FND_DIGIT_PORT = ~0b10000000; // cathode
 306:	8f e7       	ldi	r24, 0x7F	; 127
 308:	88 bb       	out	0x18, r24	; 24
		// sec_count % 10 = 0~9까지 빙글빙글
		//FND_DATA_PORT = stop_logic(digit_position);
		FND_DATA_PORT = fnd_font[ms_count/10%10];
 30a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ms_count>
 30e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ms_count+0x1>
 312:	2a e0       	ldi	r18, 0x0A	; 10
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	ca d0       	rcall	.+404    	; 0x4ae <__divmodhi4>
 31a:	cb 01       	movw	r24, r22
 31c:	b9 01       	movw	r22, r18
 31e:	c7 d0       	rcall	.+398    	; 0x4ae <__divmodhi4>
 320:	e1 e0       	ldi	r30, 0x01	; 1
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	ec 0f       	add	r30, r28
 326:	fd 1f       	adc	r31, r29
 328:	e8 0f       	add	r30, r24
 32a:	f9 1f       	adc	r31, r25
 32c:	80 81       	ld	r24, Z
 32e:	85 bb       	out	0x15, r24	; 21
		break;
 330:	40 c0       	rjmp	.+128    	; 0x3b2 <fnd_stop_display+0x110>
		case 1:
		FND_DIGIT_PORT = ~0b01000000; // cathode
 332:	8f eb       	ldi	r24, 0xBF	; 191
 334:	88 bb       	out	0x18, r24	; 24
		//FND_DATA_PORT = stop_logic(digit_position);
		FND_DATA_PORT =fnd_font[ms_count/100%100] | dp1;
 336:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ms_count>
 33a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ms_count+0x1>
 33e:	24 e6       	ldi	r18, 0x64	; 100
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	b9 01       	movw	r22, r18
 344:	b4 d0       	rcall	.+360    	; 0x4ae <__divmodhi4>
 346:	cb 01       	movw	r24, r22
 348:	b9 01       	movw	r22, r18
 34a:	b1 d0       	rcall	.+354    	; 0x4ae <__divmodhi4>
 34c:	e1 e0       	ldi	r30, 0x01	; 1
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	ec 0f       	add	r30, r28
 352:	fd 1f       	adc	r31, r29
 354:	e8 0f       	add	r30, r24
 356:	f9 1f       	adc	r31, r25
 358:	90 81       	ld	r25, Z
 35a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <dp1.1757>
 35e:	89 2b       	or	r24, r25
 360:	85 bb       	out	0x15, r24	; 21
		break;
 362:	27 c0       	rjmp	.+78     	; 0x3b2 <fnd_stop_display+0x110>
		case 2:
		FND_DIGIT_PORT = ~0b00100000; // cathode
 364:	8f ed       	ldi	r24, 0xDF	; 223
 366:	88 bb       	out	0x18, r24	; 24
		//FND_DATA_PORT = stop_logic(digit_position);
		FND_DATA_PORT = fnd_font[sec_count%10];
 368:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_count>
 36c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_count+0x1>
 370:	6a e0       	ldi	r22, 0x0A	; 10
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	9c d0       	rcall	.+312    	; 0x4ae <__divmodhi4>
 376:	e1 e0       	ldi	r30, 0x01	; 1
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	ec 0f       	add	r30, r28
 37c:	fd 1f       	adc	r31, r29
 37e:	e8 0f       	add	r30, r24
 380:	f9 1f       	adc	r31, r25
 382:	80 81       	ld	r24, Z
 384:	85 bb       	out	0x15, r24	; 21
		break;
 386:	15 c0       	rjmp	.+42     	; 0x3b2 <fnd_stop_display+0x110>
		case 3:
		FND_DIGIT_PORT = ~0b00010000; // cathode
 388:	8f ee       	ldi	r24, 0xEF	; 239
 38a:	88 bb       	out	0x18, r24	; 24
		//FND_DATA_PORT = stop_logic(digit_position);
		FND_DATA_PORT = fnd_font[sec_count/10%6];
 38c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_count>
 390:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_count+0x1>
 394:	6a e0       	ldi	r22, 0x0A	; 10
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	8a d0       	rcall	.+276    	; 0x4ae <__divmodhi4>
 39a:	cb 01       	movw	r24, r22
 39c:	66 e0       	ldi	r22, 0x06	; 6
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	86 d0       	rcall	.+268    	; 0x4ae <__divmodhi4>
 3a2:	e1 e0       	ldi	r30, 0x01	; 1
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	ec 0f       	add	r30, r28
 3a8:	fd 1f       	adc	r31, r29
 3aa:	e8 0f       	add	r30, r24
 3ac:	f9 1f       	adc	r31, r25
 3ae:	80 81       	ld	r24, Z
 3b0:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_position++;
 3b2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <digit_position.1756>
 3b6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <digit_position.1756+0x1>
 3ba:	01 96       	adiw	r24, 0x01	; 1
	digit_position %= 4; // 다음 표시할 자리수를 준비하고 함수 종료
 3bc:	83 70       	andi	r24, 0x03	; 3
 3be:	90 78       	andi	r25, 0x80	; 128
 3c0:	99 23       	and	r25, r25
 3c2:	24 f4       	brge	.+8      	; 0x3cc <fnd_stop_display+0x12a>
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	8c 6f       	ori	r24, 0xFC	; 252
 3c8:	9f 6f       	ori	r25, 0xFF	; 255
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <digit_position.1756+0x1>
 3d0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <digit_position.1756>
}
 3d4:	2b 96       	adiw	r28, 0x0b	; 11
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <main>:
int main(void)
{
	bool state = false;
	bool dot1_state = false;
	// initialize state
	init_fnd();
 3e6:	b4 de       	rcall	.-664    	; 0x150 <init_fnd>
int ms1000_flash = 0;

int main(void)
{
	bool state = false;
	bool dot1_state = false;
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
int ms_flash = 0;
int ms1000_flash = 0;

int main(void)
{
	bool state = false;
 3ea:	c0 e0       	ldi	r28, 0x00	; 0

		
    /* Replace with your application code */
    while (1) 
    {
		if(!state){
 3ec:	c1 11       	cpse	r28, r1
 3ee:	09 c0       	rjmp	.+18     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			fnd_stop_display(dot1_state);
 3f0:	8d 2f       	mov	r24, r29
 3f2:	57 df       	rcall	.-338    	; 0x2a2 <fnd_stop_display>
 3f4:	8f e9       	ldi	r24, 0x9F	; 159
 3f6:	9f e0       	ldi	r25, 0x0F	; 15
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <main+0x12>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x18>
 3fe:	00 00       	nop
 400:	36 c0       	rjmp	.+108    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			_delay_ms(1);
		}else{
			ms_count++;
 402:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ms_count>
 406:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ms_count+0x1>
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <ms_count+0x1>
 410:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ms_count>
			ms_flash++;
 414:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <ms_flash>
 418:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <ms_flash+0x1>
 41c:	2f 5f       	subi	r18, 0xFF	; 255
 41e:	3f 4f       	sbci	r19, 0xFF	; 255
 420:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <ms_flash+0x1>
 424:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <ms_flash>
			if(ms_count >= 1000){
 428:	88 3e       	cpi	r24, 0xE8	; 232
 42a:	93 40       	sbci	r25, 0x03	; 3
 42c:	c4 f0       	brlt	.+48     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				//1000ms = 1s
				ms_count = 0;
 42e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <ms_count+0x1>
 432:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ms_count>
				sec_count++; // sec count를 증가시킴
 436:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_count>
 43a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_count+0x1>
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <sec_count+0x1>
 444:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <sec_count>
				ms1000_flash++;
 448:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ms1000_flash>
 44c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <ms1000_flash+0x1>
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <ms1000_flash+0x1>
 456:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <ms1000_flash>
				dot1_state = !dot1_state;
 45a:	81 e0       	ldi	r24, 0x01	; 1
			}
			fnd_display(dot1_state);
 45c:	d8 27       	eor	r29, r24
 45e:	8d 2f       	mov	r24, r29
 460:	7e de       	rcall	.-772    	; 0x15e <fnd_display>
 462:	8f e9       	ldi	r24, 0x9F	; 159
 464:	9f e0       	ldi	r25, 0x0F	; 15
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
			_delay_ms(1);
		}
				
		if(get_button(BUTTON1_PIN,BUTTON1)){
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	84 e0       	ldi	r24, 0x04	; 4
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	28 de       	rcall	.-944    	; 0xc8 <get_button>
 478:	89 2b       	or	r24, r25
 47a:	19 f0       	breq	.+6      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			state = !state;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	c8 27       	eor	r28, r24
 480:	b5 cf       	rjmp	.-150    	; 0x3ec <main+0x6>
		}else if(get_button(BUTTON2_PIN,BUTTON2)){
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	85 e0       	ldi	r24, 0x05	; 5
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	1e de       	rcall	.-964    	; 0xc8 <get_button>
 48c:	89 2b       	or	r24, r25
 48e:	09 f4       	brne	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 490:	ad cf       	rjmp	.-166    	; 0x3ec <main+0x6>
			ms_count = 0;
 492:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <ms_count+0x1>
 496:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ms_count>
			ms_flash = 0;
 49a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <ms_flash+0x1>
 49e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <ms_flash>
			sec_count = 0;
 4a2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <sec_count+0x1>
 4a6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <sec_count>
			dot1_state = false;
 4aa:	d0 e0       	ldi	r29, 0x00	; 0
 4ac:	9f cf       	rjmp	.-194    	; 0x3ec <main+0x6>

000004ae <__divmodhi4>:
 4ae:	97 fb       	bst	r25, 7
 4b0:	07 2e       	mov	r0, r23
 4b2:	16 f4       	brtc	.+4      	; 0x4b8 <__divmodhi4+0xa>
 4b4:	00 94       	com	r0
 4b6:	06 d0       	rcall	.+12     	; 0x4c4 <__divmodhi4_neg1>
 4b8:	77 fd       	sbrc	r23, 7
 4ba:	08 d0       	rcall	.+16     	; 0x4cc <__divmodhi4_neg2>
 4bc:	0b d0       	rcall	.+22     	; 0x4d4 <__udivmodhi4>
 4be:	07 fc       	sbrc	r0, 7
 4c0:	05 d0       	rcall	.+10     	; 0x4cc <__divmodhi4_neg2>
 4c2:	3e f4       	brtc	.+14     	; 0x4d2 <__divmodhi4_exit>

000004c4 <__divmodhi4_neg1>:
 4c4:	90 95       	com	r25
 4c6:	81 95       	neg	r24
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ca:	08 95       	ret

000004cc <__divmodhi4_neg2>:
 4cc:	70 95       	com	r23
 4ce:	61 95       	neg	r22
 4d0:	7f 4f       	sbci	r23, 0xFF	; 255

000004d2 <__divmodhi4_exit>:
 4d2:	08 95       	ret

000004d4 <__udivmodhi4>:
 4d4:	aa 1b       	sub	r26, r26
 4d6:	bb 1b       	sub	r27, r27
 4d8:	51 e1       	ldi	r21, 0x11	; 17
 4da:	07 c0       	rjmp	.+14     	; 0x4ea <__udivmodhi4_ep>

000004dc <__udivmodhi4_loop>:
 4dc:	aa 1f       	adc	r26, r26
 4de:	bb 1f       	adc	r27, r27
 4e0:	a6 17       	cp	r26, r22
 4e2:	b7 07       	cpc	r27, r23
 4e4:	10 f0       	brcs	.+4      	; 0x4ea <__udivmodhi4_ep>
 4e6:	a6 1b       	sub	r26, r22
 4e8:	b7 0b       	sbc	r27, r23

000004ea <__udivmodhi4_ep>:
 4ea:	88 1f       	adc	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	5a 95       	dec	r21
 4f0:	a9 f7       	brne	.-22     	; 0x4dc <__udivmodhi4_loop>
 4f2:	80 95       	com	r24
 4f4:	90 95       	com	r25
 4f6:	bc 01       	movw	r22, r24
 4f8:	cd 01       	movw	r24, r26
 4fa:	08 95       	ret

000004fc <_exit>:
 4fc:	f8 94       	cli

000004fe <__stop_program>:
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <__stop_program>
