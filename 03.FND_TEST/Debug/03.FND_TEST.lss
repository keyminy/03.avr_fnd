
03.FND_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000070a  0000079e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800120  00800120  000007be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc8  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4f  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071d  00000000  00000000  000020c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000027e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000518  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ed  00000000  00000000  00002dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000032c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e0       	ldi	r30, 0x0A	; 10
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 33       	cpi	r26, 0x3A	; 58
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	90 d2       	rcall	.+1312   	; 0x5e4 <main>
  c4:	20 c3       	rjmp	.+1600   	; 0x706 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <get_button>:
int get_button(int button_pin, int button_number){
	int current_state;

	//예)BUTTON1은 4가 넘어옴, 2는 5, 3은 5...
	//BUTTON_PIN값은 눌리면1 안눌리면 0값을 감지함
	current_state = BUTTON_PIN & (1 << button_pin); // 10000 (1<<4결과)
  c8:	40 b3       	in	r20, 0x10	; 16
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <get_button+0x10>
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	8a 95       	dec	r24
  da:	e2 f7       	brpl	.-8      	; 0xd4 <get_button+0xc>
  dc:	cf 01       	movw	r24, r30
  de:	84 23       	and	r24, r20
  e0:	95 23       	and	r25, r21
	//current_state변수로 버튼 값을 읽습니다.

	if(current_state && previous_button_status[button_number]== BUTTON_RELEASE){
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	b9 f0       	breq	.+46     	; 0x114 <get_button+0x4c>
  e6:	fb 01       	movw	r30, r22
  e8:	e0 5e       	subi	r30, 0xE0	; 224
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	20 81       	ld	r18, Z
  ee:	21 11       	cpse	r18, r1
  f0:	11 c0       	rjmp	.+34     	; 0x114 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	ff ef       	ldi	r31, 0xFF	; 255
  f4:	2d ee       	ldi	r18, 0xED	; 237
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	f1 50       	subi	r31, 0x01	; 1
  fa:	20 40       	sbci	r18, 0x00	; 0
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <get_button+0x30>
 100:	00 c0       	rjmp	.+0      	; 0x102 <get_button+0x3a>
 102:	00 00       	nop
		// 버튼이 처음 눌러진 상태
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		previous_button_status[button_number] = BUTTON_PRESS; // 처음 눌러진 상태가 아니다
 104:	fb 01       	movw	r30, r22
 106:	e0 5e       	subi	r30, 0xE0	; 224
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 83       	st	Z, r24
		return 0; //아직 완전히 눌렀다 떼어진 상태가 아니다.
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
	} // 버튼이 이전에 눌러진 상태였으면 현재는 떼어진 상태
	else if(previous_button_status[button_number] == BUTTON_PRESS && current_state == BUTTON_RELEASE){
 114:	fb 01       	movw	r30, r22
 116:	e0 5e       	subi	r30, 0xE0	; 224
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	20 81       	ld	r18, Z
 11c:	21 30       	cpi	r18, 0x01	; 1
 11e:	91 f4       	brne	.+36     	; 0x144 <get_button+0x7c>
 120:	89 2b       	or	r24, r25
 122:	99 f4       	brne	.+38     	; 0x14a <get_button+0x82>
		previous_button_status[button_number] = BUTTON_RELEASE; // 다음 버튼 상태를 체크하기 위해 초기화
 124:	fb 01       	movw	r30, r22
 126:	e0 5e       	subi	r30, 0xE0	; 224
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	10 82       	st	Z, r1
 12c:	9f ef       	ldi	r25, 0xFF	; 255
 12e:	ed ee       	ldi	r30, 0xED	; 237
 130:	f2 e0       	ldi	r31, 0x02	; 2
 132:	91 50       	subi	r25, 0x01	; 1
 134:	e0 40       	sbci	r30, 0x00	; 0
 136:	f0 40       	sbci	r31, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <get_button+0x6a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <get_button+0x74>
 13c:	00 00       	nop
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		return 1; // 완전히 눌렀다 떼어진 상태
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
	}
	// 아직 HIGH인 상태인 것이지
	// 아직 완전히 스위치를 눌렀다 뗀 상태가 아니거나 스위치가 open된 상태 -> return 0;
	return 0;
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret

00000150 <init_fnd>:
#include "extern.h"


void init_fnd(void){
	// PortC를 모두 출력(FND 8pin)으로 하는거니까 모두 write모드로 하기
	FND_DATA_DDR = 0xFF;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	84 bb       	out	0x14, r24	; 20
	FND_DIGIT_DDR |= 0xF0;// 4,5,6,7만 출력이니까 거기만 write모드
 154:	87 b3       	in	r24, 0x17	; 23
 156:	80 6f       	ori	r24, 0xF0	; 240
 158:	87 bb       	out	0x17, r24	; 23
	
	FND_DATA_PORT = 0x00; // PORTC 설정 : FND를 all off
 15a:	15 ba       	out	0x15, r1	; 21
 15c:	08 95       	ret

0000015e <fnd_display>:

}

// display the FND
void fnd_display(bool dot1_state){
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	2b 97       	sbiw	r28, 0x0b	; 11
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
	
	// 0을 찍을려면 g빼고 1로 16진수값 3F입니다, b는 0011_1111(common anode)
	// common cathode는 1100_0000이고, 16진수로 C0
	//0    1     2     3    4    5    6    7    8    9		dp(10번방)
	unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x98,~0x7f};
 172:	9b e0       	ldi	r25, 0x0B	; 11
 174:	e0 e0       	ldi	r30, 0x00	; 0
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	de 01       	movw	r26, r28
 17a:	11 96       	adiw	r26, 0x01	; 1
 17c:	01 90       	ld	r0, Z+
 17e:	0d 92       	st	X+, r0
 180:	9a 95       	dec	r25
 182:	e1 f7       	brne	.-8      	; 0x17c <fnd_display+0x1e>

	static int digit_position = 0; // 자리수 선택  변수 0~3 : 0,1,2,3
	static int dp1 = 0x00;
	
	if(dot1_state){
 184:	88 23       	and	r24, r24
 186:	39 f0       	breq	.+14     	; 0x196 <fnd_display+0x38>
		dp1 = fnd_font[10];
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <dp1.1749+0x1>
 190:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <dp1.1749>
 194:	04 c0       	rjmp	.+8      	; 0x19e <fnd_display+0x40>
	}else {
		dp1 = 0x00;
 196:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <dp1.1749+0x1>
 19a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <dp1.1749>
	}
	
	switch(digit_position){
 19e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <digit_position.1748>
 1a2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <digit_position.1748+0x1>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	91 05       	cpc	r25, r1
 1aa:	09 f1       	breq	.+66     	; 0x1ee <fnd_display+0x90>
 1ac:	1c f4       	brge	.+6      	; 0x1b4 <fnd_display+0x56>
 1ae:	89 2b       	or	r24, r25
 1b0:	41 f0       	breq	.+16     	; 0x1c2 <fnd_display+0x64>
 1b2:	5d c0       	rjmp	.+186    	; 0x26e <fnd_display+0x110>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	91 05       	cpc	r25, r1
 1b8:	99 f1       	breq	.+102    	; 0x220 <fnd_display+0xc2>
 1ba:	03 97       	sbiw	r24, 0x03	; 3
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <fnd_display+0x62>
 1be:	42 c0       	rjmp	.+132    	; 0x244 <fnd_display+0xe6>
 1c0:	56 c0       	rjmp	.+172    	; 0x26e <fnd_display+0x110>
		case 0: // 1단위 : 100ms마다

		FND_DIGIT_PORT = ~0b10000000; // cathode
 1c2:	8f e7       	ldi	r24, 0x7F	; 127
 1c4:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[ms_count/10%10];
 1c6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ms_count>
 1ca:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <ms_count+0x1>
 1ce:	2a e0       	ldi	r18, 0x0A	; 10
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	b9 01       	movw	r22, r18
 1d4:	71 d2       	rcall	.+1250   	; 0x6b8 <__divmodhi4>
 1d6:	cb 01       	movw	r24, r22
 1d8:	b9 01       	movw	r22, r18
 1da:	6e d2       	rcall	.+1244   	; 0x6b8 <__divmodhi4>
 1dc:	e1 e0       	ldi	r30, 0x01	; 1
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ec 0f       	add	r30, r28
 1e2:	fd 1f       	adc	r31, r29
 1e4:	e8 0f       	add	r30, r24
 1e6:	f9 1f       	adc	r31, r25
 1e8:	80 81       	ld	r24, Z
 1ea:	85 bb       	out	0x15, r24	; 21
		break;
 1ec:	40 c0       	rjmp	.+128    	; 0x26e <fnd_display+0x110>
		
		case 1: // 10단위 : 10ms마다
		FND_DIGIT_PORT = ~0b01000000; // cathode
 1ee:	8f eb       	ldi	r24, 0xBF	; 191
 1f0:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT =fnd_font[ms_count/100%100] | dp1;
 1f2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ms_count>
 1f6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <ms_count+0x1>
 1fa:	24 e6       	ldi	r18, 0x64	; 100
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	b9 01       	movw	r22, r18
 200:	5b d2       	rcall	.+1206   	; 0x6b8 <__divmodhi4>
 202:	cb 01       	movw	r24, r22
 204:	b9 01       	movw	r22, r18
 206:	58 d2       	rcall	.+1200   	; 0x6b8 <__divmodhi4>
 208:	e1 e0       	ldi	r30, 0x01	; 1
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ec 0f       	add	r30, r28
 20e:	fd 1f       	adc	r31, r29
 210:	e8 0f       	add	r30, r24
 212:	f9 1f       	adc	r31, r25
 214:	90 81       	ld	r25, Z
 216:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <dp1.1749>
 21a:	89 2b       	or	r24, r25
 21c:	85 bb       	out	0x15, r24	; 21
		break;
 21e:	27 c0       	rjmp	.+78     	; 0x26e <fnd_display+0x110>
		
		case 2: // 100단위 : 초의 1의자리수
		FND_DIGIT_PORT = ~0b00100000; // cathode
 220:	8f ed       	ldi	r24, 0xDF	; 223
 222:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count%10];
 224:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sec_count>
 228:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <sec_count+0x1>
 22c:	6a e0       	ldi	r22, 0x0A	; 10
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	43 d2       	rcall	.+1158   	; 0x6b8 <__divmodhi4>
 232:	e1 e0       	ldi	r30, 0x01	; 1
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ec 0f       	add	r30, r28
 238:	fd 1f       	adc	r31, r29
 23a:	e8 0f       	add	r30, r24
 23c:	f9 1f       	adc	r31, r25
 23e:	80 81       	ld	r24, Z
 240:	85 bb       	out	0x15, r24	; 21
		break;
 242:	15 c0       	rjmp	.+42     	; 0x26e <fnd_display+0x110>
		
		case 3: // 1000단위 : 초의 10의자리수
		FND_DIGIT_PORT = ~0b00010000; // cathode
 244:	8f ee       	ldi	r24, 0xEF	; 239
 246:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count/10%6];
 248:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sec_count>
 24c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <sec_count+0x1>
 250:	6a e0       	ldi	r22, 0x0A	; 10
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	31 d2       	rcall	.+1122   	; 0x6b8 <__divmodhi4>
 256:	cb 01       	movw	r24, r22
 258:	66 e0       	ldi	r22, 0x06	; 6
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	2d d2       	rcall	.+1114   	; 0x6b8 <__divmodhi4>
 25e:	e1 e0       	ldi	r30, 0x01	; 1
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ec 0f       	add	r30, r28
 264:	fd 1f       	adc	r31, r29
 266:	e8 0f       	add	r30, r24
 268:	f9 1f       	adc	r31, r25
 26a:	80 81       	ld	r24, Z
 26c:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_position++;
 26e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <digit_position.1748>
 272:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <digit_position.1748+0x1>
 276:	01 96       	adiw	r24, 0x01	; 1
	digit_position %= 4; // 다음 표시할 자리수를 준비하고 함수 종료
 278:	83 70       	andi	r24, 0x03	; 3
 27a:	90 78       	andi	r25, 0x80	; 128
 27c:	99 23       	and	r25, r25
 27e:	24 f4       	brge	.+8      	; 0x288 <fnd_display+0x12a>
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	8c 6f       	ori	r24, 0xFC	; 252
 284:	9f 6f       	ori	r25, 0xFF	; 255
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <digit_position.1748+0x1>
 28c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <digit_position.1748>
}
 290:	2b 96       	adiw	r28, 0x0b	; 11
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <stop_logic>:
	}
	digit_position++;
	digit_position %= 4; // 다음 표시할 자리수를 준비하고 함수 종료
}

int stop_logic(int digit_position){
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	64 97       	sbiw	r28, 0x14	; 20
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	9c 01       	movw	r18, r24
	static  int  ms;
	static int turn; // Determine how many cycles it is.
	static int circle;
	//Specifies the characters to cycle through.
	unsigned char fnd_font[10]={~0xfe,~0xfe,~0xfe,~0xfe,~0xcf,~0xf7,~0xf7,~0xf7,~0xf7,~0xf9};
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	eb e0       	ldi	r30, 0x0B	; 11
 2bc:	f1 e0       	ldi	r31, 0x01	; 1
 2be:	de 01       	movw	r26, r28
 2c0:	11 96       	adiw	r26, 0x01	; 1
 2c2:	01 90       	ld	r0, Z+
 2c4:	0d 92       	st	X+, r0
 2c6:	8a 95       	dec	r24
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <stop_logic+0x20>
	// Note : Currently, If you look at fnd_font value, it will rotate counterclockwise!.
	unsigned char fnd_index[10]={0,1,2,3,3,3,2,1,0,0};
 2ca:	8a e0       	ldi	r24, 0x0A	; 10
 2cc:	e5 e1       	ldi	r30, 0x15	; 21
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	de 01       	movw	r26, r28
 2d2:	1b 96       	adiw	r26, 0x0b	; 11
 2d4:	01 90       	ld	r0, Z+
 2d6:	0d 92       	st	X+, r0
 2d8:	8a 95       	dec	r24
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <stop_logic+0x32>
	
	if(ms == 100){
 2dc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ms.1770>
 2e0:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ms.1770+0x1>
 2e4:	84 36       	cpi	r24, 0x64	; 100
 2e6:	91 05       	cpc	r25, r1
 2e8:	81 f4       	brne	.+32     	; 0x30a <stop_logic+0x68>
		ms %= 100;
 2ea:	64 e6       	ldi	r22, 0x64	; 100
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	e4 d1       	rcall	.+968    	; 0x6b8 <__divmodhi4>
 2f0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <ms.1770+0x1>
 2f4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <ms.1770>
		turn++;
 2f8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <turn.1771>
 2fc:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <turn.1771+0x1>
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <turn.1771+0x1>
 306:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <turn.1771>
	}
	if(turn == 10){
 30a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <turn.1771>
 30e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <turn.1771+0x1>
 312:	8a 30       	cpi	r24, 0x0A	; 10
 314:	91 05       	cpc	r25, r1
 316:	89 f4       	brne	.+34     	; 0x33a <stop_logic+0x98>
		circle++;
 318:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <circle.1772>
 31c:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <circle.1772+0x1>
 320:	4f 5f       	subi	r20, 0xFF	; 255
 322:	5f 4f       	sbci	r21, 0xFF	; 255
 324:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <circle.1772+0x1>
 328:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <circle.1772>
		turn %= 10;
 32c:	6a e0       	ldi	r22, 0x0A	; 10
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	c3 d1       	rcall	.+902    	; 0x6b8 <__divmodhi4>
 332:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <turn.1771+0x1>
 336:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <turn.1771>
	}
	
	switch(circle){
 33a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <circle.1772>
 33e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <circle.1772+0x1>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	91 05       	cpc	r25, r1
 346:	71 f1       	breq	.+92     	; 0x3a4 <stop_logic+0x102>
 348:	1c f4       	brge	.+6      	; 0x350 <stop_logic+0xae>
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	41 f0       	breq	.+16     	; 0x35e <stop_logic+0xbc>
 34e:	6a c0       	rjmp	.+212    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	91 05       	cpc	r25, r1
 354:	99 f1       	breq	.+102    	; 0x3bc <stop_logic+0x11a>
 356:	03 97       	sbiw	r24, 0x03	; 3
 358:	09 f4       	brne	.+2      	; 0x35c <stop_logic+0xba>
 35a:	58 c0       	rjmp	.+176    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 35c:	63 c0       	rjmp	.+198    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		case 0:
		ms++;
 35e:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <ms.1770>
 362:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <ms.1770+0x1>
 366:	4f 5f       	subi	r20, 0xFF	; 255
 368:	5f 4f       	sbci	r21, 0xFF	; 255
 36a:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <ms.1770+0x1>
 36e:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <ms.1770>
		//fnd counterclockwise
		if(digit_position == fnd_index[turn]){
 372:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <turn.1771>
 376:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <turn.1771+0x1>
 37a:	eb e0       	ldi	r30, 0x0B	; 11
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ec 0f       	add	r30, r28
 380:	fd 1f       	adc	r31, r29
 382:	e6 0f       	add	r30, r22
 384:	f7 1f       	adc	r31, r23
 386:	40 81       	ld	r20, Z
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	42 17       	cp	r20, r18
 38c:	53 07       	cpc	r21, r19
 38e:	09 f0       	breq	.+2      	; 0x392 <stop_logic+0xf0>
 390:	58 c0       	rjmp	.+176    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			return fnd_font[turn];
 392:	e1 e0       	ldi	r30, 0x01	; 1
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	ec 0f       	add	r30, r28
 398:	fd 1f       	adc	r31, r29
 39a:	e6 0f       	add	r30, r22
 39c:	f7 1f       	adc	r31, r23
 39e:	80 81       	ld	r24, Z
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	4f c0       	rjmp	.+158    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		}
		break;
		case 1:
		//fnd all off
		ms++;
 3a4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ms.1770>
 3a8:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ms.1770+0x1>
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <ms.1770+0x1>
 3b2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <ms.1770>
		return 0x00;
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	43 c0       	rjmp	.+134    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		break;
		case 2:
		//fnd clockwise
		if(digit_position == fnd_index[9-turn]){
 3bc:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <turn.1771>
 3c0:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <turn.1771+0x1>
 3c4:	89 e0       	ldi	r24, 0x09	; 9
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	84 1b       	sub	r24, r20
 3ca:	95 0b       	sbc	r25, r21
 3cc:	eb e0       	ldi	r30, 0x0B	; 11
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	ec 0f       	add	r30, r28
 3d2:	fd 1f       	adc	r31, r29
 3d4:	e8 0f       	add	r30, r24
 3d6:	f9 1f       	adc	r31, r25
 3d8:	40 81       	ld	r20, Z
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	24 17       	cp	r18, r20
 3de:	35 07       	cpc	r19, r21
 3e0:	49 f4       	brne	.+18     	; 0x3f4 <stop_logic+0x152>
			return fnd_font[9-turn];
 3e2:	e1 e0       	ldi	r30, 0x01	; 1
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	ec 0f       	add	r30, r28
 3e8:	fd 1f       	adc	r31, r29
 3ea:	e8 0f       	add	r30, r24
 3ec:	f9 1f       	adc	r31, r25
 3ee:	80 81       	ld	r24, Z
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	27 c0       	rjmp	.+78     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		}
		ms++;
 3f4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ms.1770>
 3f8:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ms.1770+0x1>
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <ms.1770+0x1>
 402:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <ms.1770>
		default:
		ms++;
		circle = 0;
		break;
	}
	return 0x00;
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
		//fnd clockwise
		if(digit_position == fnd_index[9-turn]){
			return fnd_font[9-turn];
		}
		ms++;
		break;
 40a:	1b c0       	rjmp	.+54     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		case 3:
		//fnd all off
		ms++;
 40c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ms.1770>
 410:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ms.1770+0x1>
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <ms.1770+0x1>
 41a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <ms.1770>
		return 0x00;
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0f c0       	rjmp	.+30     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		break;
		default:
		ms++;
 424:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ms.1770>
 428:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ms.1770+0x1>
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <ms.1770+0x1>
 432:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <ms.1770>
		circle = 0;
 436:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <circle.1772+0x1>
 43a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <circle.1772>
		break;
	}
	return 0x00;
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	64 96       	adiw	r28, 0x14	; 20
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <fnd_stop_display>:
	}
	digit_position++;
	digit_position %= 4; // 다음 표시할 자리수를 준비하고 함수 종료
}

void fnd_stop_display(bool btn1_state,bool dot1_state){
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
 45c:	2b 97       	sbiw	r28, 0x0b	; 11
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
	static int digit_position = 0; // 자리수 선택  변수 0~3 : 0,1,2,3
	static int dp1 = 0x00;
	
	unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x98,~0x7f};
 468:	9b e0       	ldi	r25, 0x0B	; 11
 46a:	e0 e0       	ldi	r30, 0x00	; 0
 46c:	f1 e0       	ldi	r31, 0x01	; 1
 46e:	de 01       	movw	r26, r28
 470:	11 96       	adiw	r26, 0x01	; 1
 472:	01 90       	ld	r0, Z+
 474:	0d 92       	st	X+, r0
 476:	9a 95       	dec	r25
 478:	e1 f7       	brne	.-8      	; 0x472 <fnd_stop_display+0x1e>
		
	if(dot1_state){
 47a:	66 23       	and	r22, r22
 47c:	39 f0       	breq	.+14     	; 0x48c <fnd_stop_display+0x38>
		dp1 = fnd_font[10];
 47e:	20 e8       	ldi	r18, 0x80	; 128
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <dp1.1760+0x1>
 486:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <dp1.1760>
 48a:	04 c0       	rjmp	.+8      	; 0x494 <fnd_stop_display+0x40>
	}else {
		dp1= 0x00;
 48c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <dp1.1760+0x1>
 490:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <dp1.1760>
	}
		
	switch(digit_position){
 494:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <digit_position.1759>
 498:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <digit_position.1759+0x1>
 49c:	21 30       	cpi	r18, 0x01	; 1
 49e:	31 05       	cpc	r19, r1
 4a0:	61 f1       	breq	.+88     	; 0x4fa <fnd_stop_display+0xa6>
 4a2:	1c f4       	brge	.+6      	; 0x4aa <fnd_stop_display+0x56>
 4a4:	23 2b       	or	r18, r19
 4a6:	51 f0       	breq	.+20     	; 0x4bc <fnd_stop_display+0x68>
 4a8:	83 c0       	rjmp	.+262    	; 0x5b0 <fnd_stop_display+0x15c>
 4aa:	22 30       	cpi	r18, 0x02	; 2
 4ac:	31 05       	cpc	r19, r1
 4ae:	09 f4       	brne	.+2      	; 0x4b2 <fnd_stop_display+0x5e>
 4b0:	46 c0       	rjmp	.+140    	; 0x53e <fnd_stop_display+0xea>
 4b2:	23 30       	cpi	r18, 0x03	; 3
 4b4:	31 05       	cpc	r19, r1
 4b6:	09 f4       	brne	.+2      	; 0x4ba <fnd_stop_display+0x66>
 4b8:	5d c0       	rjmp	.+186    	; 0x574 <fnd_stop_display+0x120>
 4ba:	7a c0       	rjmp	.+244    	; 0x5b0 <fnd_stop_display+0x15c>
		case 0:
		FND_DIGIT_PORT = ~0b10000000; // cathode
 4bc:	9f e7       	ldi	r25, 0x7F	; 127
 4be:	98 bb       	out	0x18, r25	; 24
		if(!btn1_state)
 4c0:	81 11       	cpse	r24, r1
 4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <fnd_stop_display+0x7e>
			FND_DATA_PORT = stop_logic(digit_position);
 4c4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <digit_position.1759>
 4c8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <digit_position.1759+0x1>
 4cc:	ea de       	rcall	.-556    	; 0x2a2 <stop_logic>
 4ce:	85 bb       	out	0x15, r24	; 21
 4d0:	6f c0       	rjmp	.+222    	; 0x5b0 <fnd_stop_display+0x15c>
		else
			FND_DATA_PORT = fnd_font[ms_count/10%10];
 4d2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ms_count>
 4d6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <ms_count+0x1>
 4da:	2a e0       	ldi	r18, 0x0A	; 10
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	b9 01       	movw	r22, r18
 4e0:	eb d0       	rcall	.+470    	; 0x6b8 <__divmodhi4>
 4e2:	cb 01       	movw	r24, r22
 4e4:	b9 01       	movw	r22, r18
 4e6:	e8 d0       	rcall	.+464    	; 0x6b8 <__divmodhi4>
 4e8:	e1 e0       	ldi	r30, 0x01	; 1
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	ec 0f       	add	r30, r28
 4ee:	fd 1f       	adc	r31, r29
 4f0:	e8 0f       	add	r30, r24
 4f2:	f9 1f       	adc	r31, r25
 4f4:	80 81       	ld	r24, Z
 4f6:	85 bb       	out	0x15, r24	; 21
 4f8:	5b c0       	rjmp	.+182    	; 0x5b0 <fnd_stop_display+0x15c>
		break;
		case 1:
		FND_DIGIT_PORT = ~0b01000000; // cathode
 4fa:	9f eb       	ldi	r25, 0xBF	; 191
 4fc:	98 bb       	out	0x18, r25	; 24
		if(!btn1_state)
 4fe:	81 11       	cpse	r24, r1
 500:	07 c0       	rjmp	.+14     	; 0x510 <fnd_stop_display+0xbc>
			FND_DATA_PORT = stop_logic(digit_position);
 502:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <digit_position.1759>
 506:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <digit_position.1759+0x1>
 50a:	cb de       	rcall	.-618    	; 0x2a2 <stop_logic>
 50c:	85 bb       	out	0x15, r24	; 21
 50e:	50 c0       	rjmp	.+160    	; 0x5b0 <fnd_stop_display+0x15c>
		else
			FND_DATA_PORT =fnd_font[ms_count/100%100] | dp1;
 510:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ms_count>
 514:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <ms_count+0x1>
 518:	24 e6       	ldi	r18, 0x64	; 100
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	b9 01       	movw	r22, r18
 51e:	cc d0       	rcall	.+408    	; 0x6b8 <__divmodhi4>
 520:	cb 01       	movw	r24, r22
 522:	b9 01       	movw	r22, r18
 524:	c9 d0       	rcall	.+402    	; 0x6b8 <__divmodhi4>
 526:	e1 e0       	ldi	r30, 0x01	; 1
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	ec 0f       	add	r30, r28
 52c:	fd 1f       	adc	r31, r29
 52e:	e8 0f       	add	r30, r24
 530:	f9 1f       	adc	r31, r25
 532:	90 81       	ld	r25, Z
 534:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <dp1.1760>
 538:	89 2b       	or	r24, r25
 53a:	85 bb       	out	0x15, r24	; 21
 53c:	39 c0       	rjmp	.+114    	; 0x5b0 <fnd_stop_display+0x15c>
		break;
		case 2:
		FND_DIGIT_PORT = ~0b00100000; // cathode
 53e:	9f ed       	ldi	r25, 0xDF	; 223
 540:	98 bb       	out	0x18, r25	; 24
		if(!btn1_state)
 542:	81 11       	cpse	r24, r1
			FND_DATA_PORT = stop_logic(digit_position);
 544:	07 c0       	rjmp	.+14     	; 0x554 <fnd_stop_display+0x100>
 546:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <digit_position.1759>
 54a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <digit_position.1759+0x1>
 54e:	a9 de       	rcall	.-686    	; 0x2a2 <stop_logic>
 550:	85 bb       	out	0x15, r24	; 21
		else
			FND_DATA_PORT = fnd_font[sec_count%10];
 552:	2e c0       	rjmp	.+92     	; 0x5b0 <fnd_stop_display+0x15c>
 554:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sec_count>
 558:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <sec_count+0x1>
 55c:	6a e0       	ldi	r22, 0x0A	; 10
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	ab d0       	rcall	.+342    	; 0x6b8 <__divmodhi4>
 562:	e1 e0       	ldi	r30, 0x01	; 1
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	ec 0f       	add	r30, r28
 568:	fd 1f       	adc	r31, r29
 56a:	e8 0f       	add	r30, r24
 56c:	f9 1f       	adc	r31, r25
 56e:	80 81       	ld	r24, Z
 570:	85 bb       	out	0x15, r24	; 21
 572:	1e c0       	rjmp	.+60     	; 0x5b0 <fnd_stop_display+0x15c>
		break;
		case 3:
		FND_DIGIT_PORT = ~0b00010000; // cathode
 574:	9f ee       	ldi	r25, 0xEF	; 239
		if(!btn1_state)
 576:	98 bb       	out	0x18, r25	; 24
 578:	81 11       	cpse	r24, r1
			FND_DATA_PORT = stop_logic(digit_position);
 57a:	07 c0       	rjmp	.+14     	; 0x58a <fnd_stop_display+0x136>
 57c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <digit_position.1759>
 580:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <digit_position.1759+0x1>
 584:	8e de       	rcall	.-740    	; 0x2a2 <stop_logic>
 586:	85 bb       	out	0x15, r24	; 21
		else
			FND_DATA_PORT = fnd_font[sec_count/10%6];
 588:	13 c0       	rjmp	.+38     	; 0x5b0 <fnd_stop_display+0x15c>
 58a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sec_count>
 58e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <sec_count+0x1>
 592:	6a e0       	ldi	r22, 0x0A	; 10
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	90 d0       	rcall	.+288    	; 0x6b8 <__divmodhi4>
 598:	cb 01       	movw	r24, r22
 59a:	66 e0       	ldi	r22, 0x06	; 6
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	8c d0       	rcall	.+280    	; 0x6b8 <__divmodhi4>
 5a0:	e1 e0       	ldi	r30, 0x01	; 1
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	ec 0f       	add	r30, r28
 5a6:	fd 1f       	adc	r31, r29
 5a8:	e8 0f       	add	r30, r24
 5aa:	f9 1f       	adc	r31, r25
 5ac:	80 81       	ld	r24, Z
 5ae:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_position++;
 5b0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <digit_position.1759>
 5b4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <digit_position.1759+0x1>
 5b8:	01 96       	adiw	r24, 0x01	; 1
	digit_position %= 4; // 다음 표시할 자리수를 준비하고 함수 종료
 5ba:	83 70       	andi	r24, 0x03	; 3
 5bc:	90 78       	andi	r25, 0x80	; 128
 5be:	99 23       	and	r25, r25
 5c0:	24 f4       	brge	.+8      	; 0x5ca <fnd_stop_display+0x176>
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	8c 6f       	ori	r24, 0xFC	; 252
 5c6:	9f 6f       	ori	r25, 0xFF	; 255
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <digit_position.1759+0x1>
 5ce:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <digit_position.1759>
}
 5d2:	2b 96       	adiw	r28, 0x0b	; 11
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	f8 94       	cli
 5d8:	de bf       	out	0x3e, r29	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	cd bf       	out	0x3d, r28	; 61
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <main>:
{
	bool state = false;
	bool btn1_state = false;
	bool dot1_state = false;
	// initialize state
	init_fnd();
 5e4:	b5 dd       	rcall	.-1174   	; 0x150 <init_fnd>

int main(void)
{
	bool state = false;
	bool btn1_state = false;
	bool dot1_state = false;
 5e6:	10 e0       	ldi	r17, 0x00	; 0
int ms1000_flash = 0;

int main(void)
{
	bool state = false;
	bool btn1_state = false;
 5e8:	d0 e0       	ldi	r29, 0x00	; 0
int ms_flash = 0;
int ms1000_flash = 0;

int main(void)
{
	bool state = false;
 5ea:	c0 e0       	ldi	r28, 0x00	; 0
	// initialize state
	init_fnd();

    while (1) 
    {
		if(!state){
 5ec:	c1 11       	cpse	r28, r1
 5ee:	0a c0       	rjmp	.+20     	; 0x604 <main+0x20>
			fnd_stop_display(btn1_state,dot1_state);
 5f0:	61 2f       	mov	r22, r17
 5f2:	8d 2f       	mov	r24, r29
 5f4:	2f df       	rcall	.-418    	; 0x454 <fnd_stop_display>
 5f6:	8f e9       	ldi	r24, 0x9F	; 159
 5f8:	9f e0       	ldi	r25, 0x0F	; 15
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <main+0x16>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <main+0x1c>
 600:	00 00       	nop
 602:	38 c0       	rjmp	.+112    	; 0x674 <main+0x90>
			_delay_ms(1);
		}else{
			if(btn1_state){
 604:	dd 23       	and	r29, r29
 606:	b1 f1       	breq	.+108    	; 0x674 <main+0x90>
				// stopwatch 모드
				ms_count++;
 608:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ms_count>
 60c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <ms_count+0x1>
 610:	01 96       	adiw	r24, 0x01	; 1
 612:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <ms_count+0x1>
 616:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <ms_count>
				ms_flash++;
 61a:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <ms_flash>
 61e:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <ms_flash+0x1>
 622:	2f 5f       	subi	r18, 0xFF	; 255
 624:	3f 4f       	sbci	r19, 0xFF	; 255
 626:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <ms_flash+0x1>
 62a:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <ms_flash>
				if(ms_count >= 1000){
 62e:	88 3e       	cpi	r24, 0xE8	; 232
 630:	93 40       	sbci	r25, 0x03	; 3
 632:	c4 f0       	brlt	.+48     	; 0x664 <main+0x80>
					//1000ms = 1s
					ms_count = 0;
 634:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <ms_count+0x1>
 638:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <ms_count>
					sec_count++; // sec count를 증가시킴
 63c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sec_count>
 640:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <sec_count+0x1>
 644:	01 96       	adiw	r24, 0x01	; 1
 646:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <sec_count+0x1>
 64a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <sec_count>
					ms1000_flash++;
 64e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ms1000_flash>
 652:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <ms1000_flash+0x1>
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <ms1000_flash+0x1>
 65c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <ms1000_flash>
					dot1_state = !dot1_state;
 660:	81 e0       	ldi	r24, 0x01	; 1
				}
				fnd_display(dot1_state);
 662:	18 27       	eor	r17, r24
 664:	81 2f       	mov	r24, r17
 666:	7b dd       	rcall	.-1290   	; 0x15e <fnd_display>
 668:	8f e9       	ldi	r24, 0x9F	; 159
 66a:	9f e0       	ldi	r25, 0x0F	; 15
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	f1 f7       	brne	.-4      	; 0x66c <main+0x88>
 670:	00 c0       	rjmp	.+0      	; 0x672 <main+0x8e>
 672:	00 00       	nop
				_delay_ms(1);
			}
		}
				
		if(get_button(BUTTON1_PIN,BUTTON1)){
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	84 e0       	ldi	r24, 0x04	; 4
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	25 dd       	rcall	.-1462   	; 0xc8 <get_button>
 67e:	89 2b       	or	r24, r25
 680:	21 f0       	breq	.+8      	; 0x68a <main+0xa6>
			state = !state;
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	c8 27       	eor	r28, r24
			btn1_state = true;
 686:	d1 e0       	ldi	r29, 0x01	; 1
 688:	b1 cf       	rjmp	.-158    	; 0x5ec <main+0x8>
		}else if(get_button(BUTTON2_PIN,BUTTON2)){
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	85 e0       	ldi	r24, 0x05	; 5
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	1a dd       	rcall	.-1484   	; 0xc8 <get_button>
 694:	89 2b       	or	r24, r25
 696:	09 f4       	brne	.+2      	; 0x69a <main+0xb6>
 698:	a9 cf       	rjmp	.-174    	; 0x5ec <main+0x8>
			ms_count = 0;
 69a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <ms_count+0x1>
 69e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <ms_count>
			ms_flash = 0;
 6a2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ms_flash+0x1>
 6a6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ms_flash>
			sec_count = 0;
 6aa:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <sec_count+0x1>
 6ae:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <sec_count>
			dot1_state = false;
 6b2:	10 e0       	ldi	r17, 0x00	; 0
			btn1_state = false;
 6b4:	d0 e0       	ldi	r29, 0x00	; 0
 6b6:	9a cf       	rjmp	.-204    	; 0x5ec <main+0x8>

000006b8 <__divmodhi4>:
 6b8:	97 fb       	bst	r25, 7
 6ba:	07 2e       	mov	r0, r23
 6bc:	16 f4       	brtc	.+4      	; 0x6c2 <__divmodhi4+0xa>
 6be:	00 94       	com	r0
 6c0:	06 d0       	rcall	.+12     	; 0x6ce <__divmodhi4_neg1>
 6c2:	77 fd       	sbrc	r23, 7
 6c4:	08 d0       	rcall	.+16     	; 0x6d6 <__divmodhi4_neg2>
 6c6:	0b d0       	rcall	.+22     	; 0x6de <__udivmodhi4>
 6c8:	07 fc       	sbrc	r0, 7
 6ca:	05 d0       	rcall	.+10     	; 0x6d6 <__divmodhi4_neg2>
 6cc:	3e f4       	brtc	.+14     	; 0x6dc <__divmodhi4_exit>

000006ce <__divmodhi4_neg1>:
 6ce:	90 95       	com	r25
 6d0:	81 95       	neg	r24
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	08 95       	ret

000006d6 <__divmodhi4_neg2>:
 6d6:	70 95       	com	r23
 6d8:	61 95       	neg	r22
 6da:	7f 4f       	sbci	r23, 0xFF	; 255

000006dc <__divmodhi4_exit>:
 6dc:	08 95       	ret

000006de <__udivmodhi4>:
 6de:	aa 1b       	sub	r26, r26
 6e0:	bb 1b       	sub	r27, r27
 6e2:	51 e1       	ldi	r21, 0x11	; 17
 6e4:	07 c0       	rjmp	.+14     	; 0x6f4 <__udivmodhi4_ep>

000006e6 <__udivmodhi4_loop>:
 6e6:	aa 1f       	adc	r26, r26
 6e8:	bb 1f       	adc	r27, r27
 6ea:	a6 17       	cp	r26, r22
 6ec:	b7 07       	cpc	r27, r23
 6ee:	10 f0       	brcs	.+4      	; 0x6f4 <__udivmodhi4_ep>
 6f0:	a6 1b       	sub	r26, r22
 6f2:	b7 0b       	sbc	r27, r23

000006f4 <__udivmodhi4_ep>:
 6f4:	88 1f       	adc	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	5a 95       	dec	r21
 6fa:	a9 f7       	brne	.-22     	; 0x6e6 <__udivmodhi4_loop>
 6fc:	80 95       	com	r24
 6fe:	90 95       	com	r25
 700:	bc 01       	movw	r22, r24
 702:	cd 01       	movw	r24, r26
 704:	08 95       	ret

00000706 <_exit>:
 706:	f8 94       	cli

00000708 <__stop_program>:
 708:	ff cf       	rjmp	.-2      	; 0x708 <__stop_program>
