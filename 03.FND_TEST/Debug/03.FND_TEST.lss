
03.FND_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000018e  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000906  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083d  00000000  00000000  00000bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031a  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000433  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000047  00000000  00000000  00001bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001bfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5a d0       	rcall	.+180    	; 0x178 <main>
  c4:	62 c0       	rjmp	.+196    	; 0x18a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_fnd>:
    }
}

void init_fnd(void){
	// PortC를 모두 출력(FND 8pin)으로 하는거니까 모두 write모드로 하기
	FND_DATA_DDR = 0xFF;
  c8:	9f ef       	ldi	r25, 0xFF	; 255
  ca:	94 bb       	out	0x14, r25	; 20
	FND_DIGIT_DDR |= 0xF0;// 4,5,6,7만 출력이니까 거기만 write모드
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	80 6f       	ori	r24, 0xF0	; 240
  d0:	87 bb       	out	0x17, r24	; 23
	
	#if 1 //common anode방식으로
		FND_DATA_PORT = ~0x00; // common anode : FND를 all off
  d2:	95 bb       	out	0x15, r25	; 21
  d4:	08 95       	ret

000000d6 <fnd_display>:
	#endif
		
}

// display the FND
void fnd_display(void){
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	2b 97       	sbiw	r28, 0x0b	; 11
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
	
	#if 1 // common anode
		// 0을 찍을려면 g빼고 1로 16진수값 3F입니다, b는 0011_1111(common anode)
		// common cathode는 1100_0000이고, 16진수로 C0
									//0    1     2     3    4    5    6    7    8    9
		unsigned char fnd_font[] = {0xc0, 0xf9, 0xa4, 0xb0,0x99,0x92,0x82,0xd8,0x80,0x98,0x00};
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	e0 e0       	ldi	r30, 0x00	; 0
  ee:	f1 e0       	ldi	r31, 0x01	; 1
  f0:	de 01       	movw	r26, r28
  f2:	11 96       	adiw	r26, 0x01	; 1
  f4:	01 90       	ld	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	8a 95       	dec	r24
  fa:	e1 f7       	brne	.-8      	; 0xf4 <fnd_display+0x1e>
	#else
		unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x98,~0x00};
	#endif
		static int digit_position = 0; // 자리수 선택 변수 0~3 : 0,1,2,3
		
	switch(digit_position){
  fc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 100:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 05       	cpc	r25, r1
 108:	79 f0       	breq	.+30     	; 0x128 <fnd_display+0x52>
 10a:	1c f4       	brge	.+6      	; 0x112 <fnd_display+0x3c>
 10c:	89 2b       	or	r24, r25
 10e:	39 f0       	breq	.+14     	; 0x11e <fnd_display+0x48>
 110:	19 c0       	rjmp	.+50     	; 0x144 <fnd_display+0x6e>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	91 05       	cpc	r25, r1
 116:	69 f0       	breq	.+26     	; 0x132 <fnd_display+0x5c>
 118:	03 97       	sbiw	r24, 0x03	; 3
 11a:	81 f0       	breq	.+32     	; 0x13c <fnd_display+0x66>
 11c:	13 c0       	rjmp	.+38     	; 0x144 <fnd_display+0x6e>
		case 0:
			#if 1
				FND_DIGIT_PORT = 0b10000000; // anode
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	88 bb       	out	0x18, r24	; 24
			#else 
				FND_DIGIT_PORT = ~0b10000000; // cathode
			#endif
				FND_DATA_PORT = fnd_font[8]; // 8번 index write = 9을 사용함
 122:	89 85       	ldd	r24, Y+9	; 0x09
 124:	85 bb       	out	0x15, r24	; 21
			break;
 126:	0e c0       	rjmp	.+28     	; 0x144 <fnd_display+0x6e>
		case 1:
			#if 1
			FND_DIGIT_PORT = 0b01000000; // anode
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	88 bb       	out	0x18, r24	; 24
			#else
			FND_DIGIT_PORT = ~0b01000000; // cathode
			#endif
			FND_DATA_PORT = fnd_font[8]; // 8번 index write = 9을 사용함
 12c:	89 85       	ldd	r24, Y+9	; 0x09
 12e:	85 bb       	out	0x15, r24	; 21
			break;
 130:	09 c0       	rjmp	.+18     	; 0x144 <fnd_display+0x6e>
		case 2:
			#if 1
			FND_DIGIT_PORT = 0b00100000; // anode
 132:	80 e2       	ldi	r24, 0x20	; 32
 134:	88 bb       	out	0x18, r24	; 24
			#else
			FND_DIGIT_PORT = ~0b00100000; // cathode
			#endif
			FND_DATA_PORT = fnd_font[8];// 8번 index write = 9을 사용함
 136:	89 85       	ldd	r24, Y+9	; 0x09
 138:	85 bb       	out	0x15, r24	; 21
			break;
 13a:	04 c0       	rjmp	.+8      	; 0x144 <fnd_display+0x6e>
		case 3:
			#if 1
			FND_DIGIT_PORT = 0b00010000; // anode
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	88 bb       	out	0x18, r24	; 24
			#else
			FND_DIGIT_PORT = ~0b00010000; // cathode
			#endif
			FND_DATA_PORT = fnd_font[8]; // 8번 index write = 9을 사용함
 140:	89 85       	ldd	r24, Y+9	; 0x09
 142:	85 bb       	out	0x15, r24	; 21
			break;
		default:
		break;
	}
	digit_position++;
 144:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 148:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
	digit_position %= 4; // 다음 표시할 자리수를 준비하고 함수 종료
 14e:	83 70       	andi	r24, 0x03	; 3
 150:	90 78       	andi	r25, 0x80	; 128
 152:	99 23       	and	r25, r25
 154:	24 f4       	brge	.+8      	; 0x15e <fnd_display+0x88>
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	8c 6f       	ori	r24, 0xFC	; 252
 15a:	9f 6f       	ori	r25, 0xFF	; 255
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 162:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
}
 166:	2b 96       	adiw	r28, 0x0b	; 11
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <main>:
void fnd_display(void);

int main(void)
{
	// initialize state
	init_fnd();
 178:	a7 df       	rcall	.-178    	; 0xc8 <init_fnd>
	
    /* Replace with your application code */
    while (1) 
    {
		fnd_display();
 17a:	ad df       	rcall	.-166    	; 0xd6 <fnd_display>
 17c:	8f e9       	ldi	r24, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	9f e0       	ldi	r25, 0x0F	; 15
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x8>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xe>
 186:	00 00       	nop
 188:	f8 cf       	rjmp	.-16     	; 0x17a <main+0x2>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
