
03.FND_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000030e  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010c  0080010c  000003ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a01  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ce  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cb  00000000  00000000  00001737  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000479  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008d  00000000  00000000  00001fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c5 d0       	rcall	.+394    	; 0x24e <main>
  c4:	22 c1       	rjmp	.+580    	; 0x30a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_fnd>:
﻿#include "globals.h"
#include "fnd.h"

void init_fnd(void){
	// PortC를 모두 출력(FND 8pin)으로 하는거니까 모두 write모드로 하기
	FND_DATA_DDR = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
	FND_DIGIT_DDR |= 0xF0;// 4,5,6,7만 출력이니까 거기만 write모드
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	80 6f       	ori	r24, 0xF0	; 240
  d0:	87 bb       	out	0x17, r24	; 23
	t_stopwatch_state state = STOPPED;
	
	#if 0 //common anode방식으로
	FND_DATA_PORT = ~0x00; // common anode : FND를 all off
	#else	// common cathode
	FND_DATA_PORT = 0x00; // PORTC 설정 : FND를 all off
  d2:	15 ba       	out	0x15, r1	; 21
  d4:	08 95       	ret

000000d6 <fnd_display>:
	#endif
	
}

// display the FND
void fnd_display(void){
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	2b 97       	sbiw	r28, 0x0b	; 11
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
	// 0을 찍을려면 g빼고 1로 16진수값 3F입니다, b는 0011_1111(common anode)
	// common cathode는 1100_0000이고, 16진수로 C0
	//0    1     2     3    4    5    6    7    8    9		dp(10번방)
	unsigned char fnd_font[] = {0xc0, 0xf9, 0xa4, 0xb0,0x99,0x92,0x82,0xd8,0x80,0x98,0x7f};
	#else
	unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x98,~0x7f};
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	e0 e0       	ldi	r30, 0x00	; 0
  ee:	f1 e0       	ldi	r31, 0x01	; 1
  f0:	de 01       	movw	r26, r28
  f2:	11 96       	adiw	r26, 0x01	; 1
  f4:	01 90       	ld	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	8a 95       	dec	r24
  fa:	e1 f7       	brne	.-8      	; 0xf4 <fnd_display+0x1e>
	#endif
	static int digit_position = 0; // 자리수 선택 변수 0~3 : 0,1,2,3
	
	switch(digit_position){
  fc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 100:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 05       	cpc	r25, r1
 108:	31 f1       	breq	.+76     	; 0x156 <fnd_display+0x80>
 10a:	1c f4       	brge	.+6      	; 0x112 <fnd_display+0x3c>
 10c:	89 2b       	or	r24, r25
 10e:	49 f0       	breq	.+18     	; 0x122 <fnd_display+0x4c>
 110:	84 c0       	rjmp	.+264    	; 0x21a <fnd_display+0x144>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	91 05       	cpc	r25, r1
 116:	09 f4       	brne	.+2      	; 0x11a <fnd_display+0x44>
 118:	3f c0       	rjmp	.+126    	; 0x198 <fnd_display+0xc2>
 11a:	03 97       	sbiw	r24, 0x03	; 3
 11c:	09 f4       	brne	.+2      	; 0x120 <fnd_display+0x4a>
 11e:	5d c0       	rjmp	.+186    	; 0x1da <fnd_display+0x104>
 120:	7c c0       	rjmp	.+248    	; 0x21a <fnd_display+0x144>
		case 0: // 1단위
		#if 0
		FND_DIGIT_PORT = 0b10000000; // anode
		FND_DATA_PORT = fnd_font[sec_count % 10]& fnd_font[10];
		#else
		FND_DIGIT_PORT = ~0b10000000; // cathode
 122:	8f e7       	ldi	r24, 0x7F	; 127
 124:	88 bb       	out	0x18, r24	; 24
		// sec_count % 10 = 0~9까지 빙글빙글
		FND_DATA_PORT = fnd_font[sec_count % 10] | fnd_font[10];
 126:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
 12a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 12e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 132:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 136:	2a e0       	ldi	r18, 0x0A	; 10
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	c3 d0       	rcall	.+390    	; 0x2c6 <__udivmodsi4>
 140:	e1 e0       	ldi	r30, 0x01	; 1
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	e6 0f       	add	r30, r22
 14a:	f7 1f       	adc	r31, r23
 14c:	90 81       	ld	r25, Z
 14e:	8b 85       	ldd	r24, Y+11	; 0x0b
 150:	89 2b       	or	r24, r25
 152:	85 bb       	out	0x15, r24	; 21
		#endif
		//FND_DATA_PORT = fnd_font[sec_count % 10];
		
		break;
 154:	62 c0       	rjmp	.+196    	; 0x21a <fnd_display+0x144>
		case 1: // 10단위
		#if 0
		FND_DIGIT_PORT = 0b01000000; // anode
		FND_DATA_PORT = fnd_font[(sec_count/10)%6]& fnd_font[10]; //초의 10의자리수가 나옴
		#else
		FND_DIGIT_PORT = ~0b01000000; // cathode
 156:	8f eb       	ldi	r24, 0xBF	; 191
 158:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[(sec_count/10)%6]| fnd_font[10]; //초의 10의자리수가 나옴
 15a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
 15e:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 162:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 166:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 16a:	2a e0       	ldi	r18, 0x0A	; 10
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	a9 d0       	rcall	.+338    	; 0x2c6 <__udivmodsi4>
 174:	ca 01       	movw	r24, r20
 176:	b9 01       	movw	r22, r18
 178:	26 e0       	ldi	r18, 0x06	; 6
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	a2 d0       	rcall	.+324    	; 0x2c6 <__udivmodsi4>
 182:	e1 e0       	ldi	r30, 0x01	; 1
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ec 0f       	add	r30, r28
 188:	fd 1f       	adc	r31, r29
 18a:	e6 0f       	add	r30, r22
 18c:	f7 1f       	adc	r31, r23
 18e:	90 81       	ld	r25, Z
 190:	8b 85       	ldd	r24, Y+11	; 0x0b
 192:	89 2b       	or	r24, r25
 194:	85 bb       	out	0x15, r24	; 21
		#endif
		//FND_DATA_PORT = fnd_font[(sec_count/10)%6]; //초의 10의자리수가 나옴
		break;
 196:	41 c0       	rjmp	.+130    	; 0x21a <fnd_display+0x144>
		case 2: // 100단위
		#if 0
		FND_DIGIT_PORT = 0b00100000; // anode
		FND_DATA_PORT = fnd_font[(sec_count/60)%10] & fnd_font[10];// 분의 1의자리수가 나옴.
		#else
		FND_DIGIT_PORT = ~0b00100000; // cathode
 198:	8f ed       	ldi	r24, 0xDF	; 223
 19a:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[(sec_count/60)%10] | fnd_font[10];// 분의 1의자리수가 나옴.
 19c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
 1a0:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 1a4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 1a8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 1ac:	2c e3       	ldi	r18, 0x3C	; 60
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	88 d0       	rcall	.+272    	; 0x2c6 <__udivmodsi4>
 1b6:	ca 01       	movw	r24, r20
 1b8:	b9 01       	movw	r22, r18
 1ba:	2a e0       	ldi	r18, 0x0A	; 10
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	81 d0       	rcall	.+258    	; 0x2c6 <__udivmodsi4>
 1c4:	e1 e0       	ldi	r30, 0x01	; 1
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	ec 0f       	add	r30, r28
 1ca:	fd 1f       	adc	r31, r29
 1cc:	e6 0f       	add	r30, r22
 1ce:	f7 1f       	adc	r31, r23
 1d0:	90 81       	ld	r25, Z
 1d2:	8b 85       	ldd	r24, Y+11	; 0x0b
 1d4:	89 2b       	or	r24, r25
 1d6:	85 bb       	out	0x15, r24	; 21
		#endif
		//FND_DATA_PORT = fnd_font[(sec_count/60)%10];// 분의 1의자리수가 나옴.
		break;
 1d8:	20 c0       	rjmp	.+64     	; 0x21a <fnd_display+0x144>
		case 3: // 1000단위
		#if 0
		FND_DIGIT_PORT = 0b00010000; // anode
		FND_DATA_PORT = fnd_font[(sec_count/600)%6]& fnd_font[10];
		#else
		FND_DIGIT_PORT = ~0b00010000; // cathode
 1da:	8f ee       	ldi	r24, 0xEF	; 239
 1dc:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[(sec_count/600)%6]| fnd_font[10];
 1de:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
 1e2:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 1e6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 1ea:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 1ee:	28 e5       	ldi	r18, 0x58	; 88
 1f0:	32 e0       	ldi	r19, 0x02	; 2
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	67 d0       	rcall	.+206    	; 0x2c6 <__udivmodsi4>
 1f8:	ca 01       	movw	r24, r20
 1fa:	b9 01       	movw	r22, r18
 1fc:	26 e0       	ldi	r18, 0x06	; 6
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	60 d0       	rcall	.+192    	; 0x2c6 <__udivmodsi4>
 206:	e1 e0       	ldi	r30, 0x01	; 1
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ec 0f       	add	r30, r28
 20c:	fd 1f       	adc	r31, r29
 20e:	e6 0f       	add	r30, r22
 210:	f7 1f       	adc	r31, r23
 212:	90 81       	ld	r25, Z
 214:	8b 85       	ldd	r24, Y+11	; 0x0b
 216:	89 2b       	or	r24, r25
 218:	85 bb       	out	0x15, r24	; 21
		//FND_DATA_PORT = fnd_font[(sec_count/600)%6];
		break;
		default:
		break;
	}
	digit_position++;
 21a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 21e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 222:	01 96       	adiw	r24, 0x01	; 1
	digit_position %= 4; // 다음 표시할 자리수를 준비하고 함수 종료
 224:	83 70       	andi	r24, 0x03	; 3
 226:	90 78       	andi	r25, 0x80	; 128
 228:	99 23       	and	r25, r25
 22a:	24 f4       	brge	.+8      	; 0x234 <fnd_display+0x15e>
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	8c 6f       	ori	r24, 0xFC	; 252
 230:	9f 6f       	ori	r25, 0xFF	; 255
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 238:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
}
 23c:	2b 96       	adiw	r28, 0x0b	; 11
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <main>:
uint32_t sec_count = 0;

int main(void)
{
	// initialize state
	init_fnd();
 24e:	3c df       	rcall	.-392    	; 0xc8 <init_fnd>
	
    /* Replace with your application code */
    while (1) 
    {
		fnd_display();
 250:	42 df       	rcall	.-380    	; 0xd6 <fnd_display>
 252:	89 ef       	ldi	r24, 0xF9	; 249
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x8>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0xe>
 25c:	00 00       	nop
 25e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <ms_count>
		_delay_ms(1); //1ms마다 fnd_display함수 호출
		ms_count++;
 262:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <ms_count+0x1>
 266:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <ms_count+0x2>
 26a:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <ms_count+0x3>
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	a1 1d       	adc	r26, r1
 272:	b1 1d       	adc	r27, r1
 274:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ms_count>
 278:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <ms_count+0x1>
 27c:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <ms_count+0x2>
 280:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <ms_count+0x3>
 284:	88 3e       	cpi	r24, 0xE8	; 232
		if(ms_count == 1000){
 286:	93 40       	sbci	r25, 0x03	; 3
 288:	a1 05       	cpc	r26, r1
 28a:	b1 05       	cpc	r27, r1
 28c:	09 f7       	brne	.-62     	; 0x250 <main+0x2>
 28e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <ms_count>
			//1000ms = 1s
			ms_count = 0;
 292:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <ms_count+0x1>
 296:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ms_count+0x2>
 29a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <ms_count+0x3>
 29e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sec_count>
			sec_count++; // sec count를 증가시킴
 2a2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sec_count+0x1>
 2a6:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <sec_count+0x2>
 2aa:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <sec_count+0x3>
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	a1 1d       	adc	r26, r1
 2b2:	b1 1d       	adc	r27, r1
 2b4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sec_count>
 2b8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <sec_count+0x1>
 2bc:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <sec_count+0x2>
 2c0:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <sec_count+0x3>
 2c4:	c5 cf       	rjmp	.-118    	; 0x250 <main+0x2>

000002c6 <__udivmodsi4>:
 2c6:	a1 e2       	ldi	r26, 0x21	; 33
 2c8:	1a 2e       	mov	r1, r26
 2ca:	aa 1b       	sub	r26, r26
 2cc:	bb 1b       	sub	r27, r27
 2ce:	fd 01       	movw	r30, r26
 2d0:	0d c0       	rjmp	.+26     	; 0x2ec <__udivmodsi4_ep>

000002d2 <__udivmodsi4_loop>:
 2d2:	aa 1f       	adc	r26, r26
 2d4:	bb 1f       	adc	r27, r27
 2d6:	ee 1f       	adc	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	a2 17       	cp	r26, r18
 2dc:	b3 07       	cpc	r27, r19
 2de:	e4 07       	cpc	r30, r20
 2e0:	f5 07       	cpc	r31, r21
 2e2:	20 f0       	brcs	.+8      	; 0x2ec <__udivmodsi4_ep>
 2e4:	a2 1b       	sub	r26, r18
 2e6:	b3 0b       	sbc	r27, r19
 2e8:	e4 0b       	sbc	r30, r20
 2ea:	f5 0b       	sbc	r31, r21

000002ec <__udivmodsi4_ep>:
 2ec:	66 1f       	adc	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	88 1f       	adc	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	1a 94       	dec	r1
 2f6:	69 f7       	brne	.-38     	; 0x2d2 <__udivmodsi4_loop>
 2f8:	60 95       	com	r22
 2fa:	70 95       	com	r23
 2fc:	80 95       	com	r24
 2fe:	90 95       	com	r25
 300:	9b 01       	movw	r18, r22
 302:	ac 01       	movw	r20, r24
 304:	bd 01       	movw	r22, r26
 306:	cf 01       	movw	r24, r30
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
