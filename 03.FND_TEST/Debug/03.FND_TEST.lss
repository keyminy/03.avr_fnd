
03.FND_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003c2  00000456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010c  0080010c  00000462  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c08  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a17  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000570  00000000  00000000  00001b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000020d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ba  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024e  00000000  00000000  00002646  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bf d0       	rcall	.+382    	; 0x242 <main>
  c4:	7c c1       	rjmp	.+760    	; 0x3be <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <get_button>:
int get_button(int button_pin, int button_number){
	int current_state;

	//예)BUTTON1은 4가 넘어옴, 2는 5, 3은 5...
	//BUTTON_PIN값은 눌리면1 안눌리면 0값을 감지함
	current_state = BUTTON_PIN & (1 << button_pin); // 10000 (1<<4결과)
  c8:	40 b3       	in	r20, 0x10	; 16
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <get_button+0x10>
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	8a 95       	dec	r24
  da:	e2 f7       	brpl	.-8      	; 0xd4 <get_button+0xc>
  dc:	cf 01       	movw	r24, r30
  de:	84 23       	and	r24, r20
  e0:	95 23       	and	r25, r21
	//current_state변수로 버튼 값을 읽습니다.

	if(current_state && previous_button_status[button_number]== BUTTON_RELEASE){
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	b9 f0       	breq	.+46     	; 0x114 <get_button+0x4c>
  e6:	fb 01       	movw	r30, r22
  e8:	e4 5f       	subi	r30, 0xF4	; 244
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	20 81       	ld	r18, Z
  ee:	21 11       	cpse	r18, r1
  f0:	11 c0       	rjmp	.+34     	; 0x114 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	ff ef       	ldi	r31, 0xFF	; 255
  f4:	2d ee       	ldi	r18, 0xED	; 237
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	f1 50       	subi	r31, 0x01	; 1
  fa:	20 40       	sbci	r18, 0x00	; 0
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <get_button+0x30>
 100:	00 c0       	rjmp	.+0      	; 0x102 <get_button+0x3a>
 102:	00 00       	nop
		// 버튼이 처음 눌러진 상태
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		previous_button_status[button_number] = BUTTON_PRESS; // 처음 눌러진 상태가 아니다
 104:	fb 01       	movw	r30, r22
 106:	e4 5f       	subi	r30, 0xF4	; 244
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 83       	st	Z, r24
		return 0; //아직 완전히 눌렀다 떼어진 상태가 아니다.
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
	} // 버튼이 이전에 눌러진 상태였으면 현재는 떼어진 상태
	else if(previous_button_status[button_number] == BUTTON_PRESS && current_state == BUTTON_RELEASE){
 114:	fb 01       	movw	r30, r22
 116:	e4 5f       	subi	r30, 0xF4	; 244
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	20 81       	ld	r18, Z
 11c:	21 30       	cpi	r18, 0x01	; 1
 11e:	91 f4       	brne	.+36     	; 0x144 <get_button+0x7c>
 120:	89 2b       	or	r24, r25
 122:	99 f4       	brne	.+38     	; 0x14a <get_button+0x82>
		previous_button_status[button_number] = BUTTON_RELEASE; // 다음 버튼 상태를 체크하기 위해 초기화
 124:	fb 01       	movw	r30, r22
 126:	e4 5f       	subi	r30, 0xF4	; 244
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	10 82       	st	Z, r1
 12c:	9f ef       	ldi	r25, 0xFF	; 255
 12e:	ed ee       	ldi	r30, 0xED	; 237
 130:	f2 e0       	ldi	r31, 0x02	; 2
 132:	91 50       	subi	r25, 0x01	; 1
 134:	e0 40       	sbci	r30, 0x00	; 0
 136:	f0 40       	sbci	r31, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <get_button+0x6a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <get_button+0x74>
 13c:	00 00       	nop
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		return 1; // 완전히 눌렀다 떼어진 상태
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
	}
	// 아직 HIGH인 상태인 것이지
	// 아직 완전히 스위치를 눌렀다 뗀 상태가 아니거나 스위치가 open된 상태 -> return 0;
	return 0;
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret

00000150 <init_fnd>:



void init_fnd(void){
	// PortC를 모두 출력(FND 8pin)으로 하는거니까 모두 write모드로 하기
	FND_DATA_DDR = 0xFF;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	84 bb       	out	0x14, r24	; 20
	FND_DIGIT_DDR |= 0xF0;// 4,5,6,7만 출력이니까 거기만 write모드
 154:	87 b3       	in	r24, 0x17	; 23
 156:	80 6f       	ori	r24, 0xF0	; 240
 158:	87 bb       	out	0x17, r24	; 23
	
	FND_DATA_PORT = 0x00; // PORTC 설정 : FND를 all off
 15a:	15 ba       	out	0x15, r1	; 21
 15c:	08 95       	ret

0000015e <fnd_display>:

}

// display the FND
void fnd_display(int d4,int d3,int d2,int d1){
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	2b 97       	sbiw	r28, 0x0b	; 11
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
 176:	8c 01       	movw	r16, r24
	// 0을 찍을려면 g빼고 1로 16진수값 3F입니다, b는 0011_1111(common anode)
	// common cathode는 1100_0000이고, 16진수로 C0
	//0    1     2     3    4    5    6    7    8    9		dp(10번방)
	unsigned char fnd_font[] = {0xc0, 0xf9, 0xa4, 0xb0,0x99,0x92,0x82,0xd8,0x80,0x98,0x7f};
	#else
	unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x98,~0x7f};
 178:	9b e0       	ldi	r25, 0x0B	; 11
 17a:	e0 e0       	ldi	r30, 0x00	; 0
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	de 01       	movw	r26, r28
 180:	11 96       	adiw	r26, 0x01	; 1
 182:	01 90       	ld	r0, Z+
 184:	0d 92       	st	X+, r0
 186:	9a 95       	dec	r25
 188:	e1 f7       	brne	.-8      	; 0x182 <fnd_display+0x24>
	#endif
	static int digit_position = 0; // 자리수 선택  변수 0~3 : 0,1,2,3
	
	switch(digit_position){
 18a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <digit_position.1749>
 18e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <digit_position.1749+0x1>
 192:	e1 30       	cpi	r30, 0x01	; 1
 194:	f1 05       	cpc	r31, r1
 196:	a9 f0       	breq	.+42     	; 0x1c2 <fnd_display+0x64>
 198:	1c f4       	brge	.+6      	; 0x1a0 <fnd_display+0x42>
 19a:	ef 2b       	or	r30, r31
 19c:	39 f0       	breq	.+14     	; 0x1ac <fnd_display+0x4e>
 19e:	35 c0       	rjmp	.+106    	; 0x20a <fnd_display+0xac>
 1a0:	e2 30       	cpi	r30, 0x02	; 2
 1a2:	f1 05       	cpc	r31, r1
 1a4:	d9 f0       	breq	.+54     	; 0x1dc <fnd_display+0x7e>
 1a6:	33 97       	sbiw	r30, 0x03	; 3
 1a8:	31 f1       	breq	.+76     	; 0x1f6 <fnd_display+0x98>
 1aa:	2f c0       	rjmp	.+94     	; 0x20a <fnd_display+0xac>
		case 0: // 1단위 : 100ms마다

		FND_DIGIT_PORT = ~0b10000000; // cathode
 1ac:	8f e7       	ldi	r24, 0x7F	; 127
 1ae:	88 bb       	out	0x18, r24	; 24
		// sec_count % 10 = 0~9까지 빙글빙글
		FND_DATA_PORT = fnd_font[d4];
 1b0:	e1 e0       	ldi	r30, 0x01	; 1
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ec 0f       	add	r30, r28
 1b6:	fd 1f       	adc	r31, r29
 1b8:	e0 0f       	add	r30, r16
 1ba:	f1 1f       	adc	r31, r17
 1bc:	80 81       	ld	r24, Z
 1be:	85 bb       	out	0x15, r24	; 21

		break;
 1c0:	24 c0       	rjmp	.+72     	; 0x20a <fnd_display+0xac>
		
		case 1: // 10단위 : 초의 1자리수(0~9)

		FND_DIGIT_PORT = ~0b01000000; // cathode
 1c2:	8f eb       	ldi	r24, 0xBF	; 191
 1c4:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[d3]| fnd_font[10]; //초의 10의자리수가 나옴
 1c6:	e1 e0       	ldi	r30, 0x01	; 1
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	ec 0f       	add	r30, r28
 1cc:	fd 1f       	adc	r31, r29
 1ce:	e6 0f       	add	r30, r22
 1d0:	f7 1f       	adc	r31, r23
 1d2:	90 81       	ld	r25, Z
 1d4:	8b 85       	ldd	r24, Y+11	; 0x0b
 1d6:	89 2b       	or	r24, r25
 1d8:	85 bb       	out	0x15, r24	; 21

		break;
 1da:	17 c0       	rjmp	.+46     	; 0x20a <fnd_display+0xac>
		
		case 2: // 100단위 : 초의 10자리수(0~6)
		FND_DIGIT_PORT = ~0b00100000; // cathode
 1dc:	8f ed       	ldi	r24, 0xDF	; 223
 1de:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[d2] | fnd_font[10];// 분의 1의자리수가 나옴.
 1e0:	e1 e0       	ldi	r30, 0x01	; 1
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	e4 0f       	add	r30, r20
 1ea:	f5 1f       	adc	r31, r21
 1ec:	90 81       	ld	r25, Z
 1ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 1f0:	89 2b       	or	r24, r25
 1f2:	85 bb       	out	0x15, r24	; 21
		break;
 1f4:	0a c0       	rjmp	.+20     	; 0x20a <fnd_display+0xac>
		
		case 3: // 1000단위 : 분단위 (0~9)
		FND_DIGIT_PORT = ~0b00010000; // cathode
 1f6:	8f ee       	ldi	r24, 0xEF	; 239
 1f8:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[d1];
 1fa:	e1 e0       	ldi	r30, 0x01	; 1
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ec 0f       	add	r30, r28
 200:	fd 1f       	adc	r31, r29
 202:	e2 0f       	add	r30, r18
 204:	f3 1f       	adc	r31, r19
 206:	80 81       	ld	r24, Z
 208:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_position++;
 20a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <digit_position.1749>
 20e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <digit_position.1749+0x1>
 212:	01 96       	adiw	r24, 0x01	; 1
	digit_position %= 4; // 다음 표시할 자리수를 준비하고 함수 종료
 214:	83 70       	andi	r24, 0x03	; 3
 216:	90 78       	andi	r25, 0x80	; 128
 218:	99 23       	and	r25, r25
 21a:	24 f4       	brge	.+8      	; 0x224 <fnd_display+0xc6>
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	8c 6f       	ori	r24, 0xFC	; 252
 220:	9f 6f       	ori	r25, 0xFF	; 255
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <digit_position.1749+0x1>
 228:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <digit_position.1749>
 22c:	2b 96       	adiw	r28, 0x0b	; 11
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de bf       	out	0x3e, r29	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd bf       	out	0x3d, r28	; 61
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <main>:

uint32_t ms_count = 0; 
uint32_t sec_count = 0;

int main(void)
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <main+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <main+0x8>
 24a:	1f 92       	push	r1
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
	bool state = false;
	// initialize state
	init_fnd();
 250:	7f df       	rcall	.-258    	; 0x150 <init_fnd>
uint32_t ms_count = 0; 
uint32_t sec_count = 0;

int main(void)
{
	bool state = false;
 252:	1d 82       	std	Y+5, r1	; 0x05

		
    /* Replace with your application code */
    while (1) 
    {
		if(!state){
 254:	2d 81       	ldd	r18, Y+5	; 0x05
 256:	22 23       	and	r18, r18
 258:	09 f4       	brne	.+2      	; 0x25c <main+0x1a>
 25a:	82 c0       	rjmp	.+260    	; 0x360 <main+0x11e>

		}else{
			ms_count++;
 25c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <ms_count>
 260:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <ms_count+0x1>
 264:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <ms_count+0x2>
 268:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <ms_count+0x3>
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	a1 1d       	adc	r26, r1
 270:	b1 1d       	adc	r27, r1
 272:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <ms_count>
 276:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <ms_count+0x1>
 27a:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <ms_count+0x2>
 27e:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <ms_count+0x3>
			if(ms_count >= 1000){
 282:	88 3e       	cpi	r24, 0xE8	; 232
 284:	93 40       	sbci	r25, 0x03	; 3
 286:	a1 05       	cpc	r26, r1
 288:	b1 05       	cpc	r27, r1
 28a:	d8 f0       	brcs	.+54     	; 0x2c2 <main+0x80>
				//1000ms = 1s
				ms_count = 0;
 28c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <ms_count>
 290:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ms_count+0x1>
 294:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ms_count+0x2>
 298:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <ms_count+0x3>
				sec_count++; // sec count를 증가시킴
 29c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sec_count>
 2a0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <sec_count+0x1>
 2a4:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <sec_count+0x2>
 2a8:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <sec_count+0x3>
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	a1 1d       	adc	r26, r1
 2b0:	b1 1d       	adc	r27, r1
 2b2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sec_count>
 2b6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <sec_count+0x1>
 2ba:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <sec_count+0x2>
 2be:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <sec_count+0x3>
			}
			fnd_display(
				sec_count/10%10, //d4
				sec_count%10, //d3
				ms_count/100%100, //d2
				ms_count/10%10 //d1
 2c2:	40 90 16 01 	lds	r4, 0x0116	; 0x800116 <ms_count>
 2c6:	50 90 17 01 	lds	r5, 0x0117	; 0x800117 <ms_count+0x1>
 2ca:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <ms_count+0x2>
 2ce:	70 90 19 01 	lds	r7, 0x0119	; 0x800119 <ms_count+0x3>
 2d2:	0f 2e       	mov	r0, r31
 2d4:	fa e0       	ldi	r31, 0x0A	; 10
 2d6:	cf 2e       	mov	r12, r31
 2d8:	d1 2c       	mov	r13, r1
 2da:	e1 2c       	mov	r14, r1
 2dc:	f1 2c       	mov	r15, r1
 2de:	f0 2d       	mov	r31, r0
 2e0:	c3 01       	movw	r24, r6
 2e2:	b2 01       	movw	r22, r4
 2e4:	a7 01       	movw	r20, r14
 2e6:	96 01       	movw	r18, r12
 2e8:	48 d0       	rcall	.+144    	; 0x37a <__udivmodsi4>
 2ea:	ca 01       	movw	r24, r20
 2ec:	b9 01       	movw	r22, r18
 2ee:	a7 01       	movw	r20, r14
 2f0:	96 01       	movw	r18, r12
 2f2:	43 d0       	rcall	.+134    	; 0x37a <__udivmodsi4>
 2f4:	69 83       	std	Y+1, r22	; 0x01
 2f6:	7a 83       	std	Y+2, r23	; 0x02
 2f8:	8b 83       	std	Y+3, r24	; 0x03
 2fa:	9c 83       	std	Y+4, r25	; 0x04
				sec_count++; // sec count를 증가시킴
			}
			fnd_display(
				sec_count/10%10, //d4
				sec_count%10, //d3
				ms_count/100%100, //d2
 2fc:	0f 2e       	mov	r0, r31
 2fe:	f4 e6       	ldi	r31, 0x64	; 100
 300:	8f 2e       	mov	r8, r31
 302:	91 2c       	mov	r9, r1
 304:	a1 2c       	mov	r10, r1
 306:	b1 2c       	mov	r11, r1
 308:	f0 2d       	mov	r31, r0
 30a:	c3 01       	movw	r24, r6
 30c:	b2 01       	movw	r22, r4
 30e:	a5 01       	movw	r20, r10
 310:	94 01       	movw	r18, r8
 312:	33 d0       	rcall	.+102    	; 0x37a <__udivmodsi4>
 314:	ca 01       	movw	r24, r20
 316:	b9 01       	movw	r22, r18
 318:	a5 01       	movw	r20, r10
 31a:	94 01       	movw	r18, r8
 31c:	2e d0       	rcall	.+92     	; 0x37a <__udivmodsi4>
 31e:	2b 01       	movw	r4, r22
 320:	3c 01       	movw	r6, r24
				ms_count = 0;
				sec_count++; // sec count를 증가시킴
			}
			fnd_display(
				sec_count/10%10, //d4
				sec_count%10, //d3
 322:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <sec_count>
 326:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <sec_count+0x1>
 32a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <sec_count+0x2>
 32e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sec_count+0x3>
 332:	a7 01       	movw	r20, r14
 334:	96 01       	movw	r18, r12
 336:	21 d0       	rcall	.+66     	; 0x37a <__udivmodsi4>
 338:	4b 01       	movw	r8, r22
				//1000ms = 1s
				ms_count = 0;
				sec_count++; // sec count를 증가시킴
			}
			fnd_display(
				sec_count/10%10, //d4
 33a:	5c 01       	movw	r10, r24
 33c:	ca 01       	movw	r24, r20
 33e:	b9 01       	movw	r22, r18
 340:	a7 01       	movw	r20, r14
 342:	96 01       	movw	r18, r12
 344:	1a d0       	rcall	.+52     	; 0x37a <__udivmodsi4>
 346:	dc 01       	movw	r26, r24
			if(ms_count >= 1000){
				//1000ms = 1s
				ms_count = 0;
				sec_count++; // sec count를 증가시킴
			}
			fnd_display(
 348:	cb 01       	movw	r24, r22
 34a:	29 81       	ldd	r18, Y+1	; 0x01
 34c:	3a 81       	ldd	r19, Y+2	; 0x02
 34e:	a2 01       	movw	r20, r4
 350:	b4 01       	movw	r22, r8
 352:	05 df       	rcall	.-502    	; 0x15e <fnd_display>
 354:	8f e7       	ldi	r24, 0x7F	; 127
 356:	9e e3       	ldi	r25, 0x3E	; 62
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x116>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x11c>
				ms_count/10%10 //d1
			);
			_delay_ms(4);
		}
				
		if(get_button(BUTTON1_PIN,BUTTON1)){
 35e:	00 00       	nop
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	af de       	rcall	.-674    	; 0xc8 <get_button>
 36a:	89 2b       	or	r24, r25
 36c:	09 f4       	brne	.+2      	; 0x370 <main+0x12e>
 36e:	72 cf       	rjmp	.-284    	; 0x254 <main+0x12>
			state = !state;
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	9d 81       	ldd	r25, Y+5	; 0x05
 374:	98 27       	eor	r25, r24
 376:	9d 83       	std	Y+5, r25	; 0x05
 378:	6d cf       	rjmp	.-294    	; 0x254 <main+0x12>

0000037a <__udivmodsi4>:
 37a:	a1 e2       	ldi	r26, 0x21	; 33
 37c:	1a 2e       	mov	r1, r26
 37e:	aa 1b       	sub	r26, r26
 380:	bb 1b       	sub	r27, r27
 382:	fd 01       	movw	r30, r26
 384:	0d c0       	rjmp	.+26     	; 0x3a0 <__udivmodsi4_ep>

00000386 <__udivmodsi4_loop>:
 386:	aa 1f       	adc	r26, r26
 388:	bb 1f       	adc	r27, r27
 38a:	ee 1f       	adc	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	a2 17       	cp	r26, r18
 390:	b3 07       	cpc	r27, r19
 392:	e4 07       	cpc	r30, r20
 394:	f5 07       	cpc	r31, r21
 396:	20 f0       	brcs	.+8      	; 0x3a0 <__udivmodsi4_ep>
 398:	a2 1b       	sub	r26, r18
 39a:	b3 0b       	sbc	r27, r19
 39c:	e4 0b       	sbc	r30, r20
 39e:	f5 0b       	sbc	r31, r21

000003a0 <__udivmodsi4_ep>:
 3a0:	66 1f       	adc	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	88 1f       	adc	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	1a 94       	dec	r1
 3aa:	69 f7       	brne	.-38     	; 0x386 <__udivmodsi4_loop>
 3ac:	60 95       	com	r22
 3ae:	70 95       	com	r23
 3b0:	80 95       	com	r24
 3b2:	90 95       	com	r25
 3b4:	9b 01       	movw	r18, r22
 3b6:	ac 01       	movw	r20, r24
 3b8:	bd 01       	movw	r22, r26
 3ba:	cf 01       	movw	r24, r30
 3bc:	08 95       	ret

000003be <_exit>:
 3be:	f8 94       	cli

000003c0 <__stop_program>:
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <__stop_program>
